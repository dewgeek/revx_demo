"use strict";angular.module("revxApp",["ngAnimate","ngResource","ngRoute","ngSanitize","ui.bootstrap","ui.grid","ngResource"]).config(["$routeProvider",function(a){a.when("/",{templateUrl:"views/main.html",controller:"MainCtrl",controllerAs:"main"}).otherwise({redirectTo:"/"})}]),angular.module("revxApp").controller("MainCtrl",["$scope","loadSchedules",function(a,b){var c="KILLED",d="SUSPENDED",e="DONE",f=[],g=[],h=[];a.name="Rakesh G",a.jobs=data.schedules;var i=function(b){angular.forEach(b,function(a,b){switch(a.status){case c:f.push(a);break;case d:g.push(a);break;case e:h.push(a)}});var i=[{status:c,count:f.length},{status:d,count:g.length},{status:e,count:h.length}];a.sorted_jobs_grid={rowTemplate:"views/row_template.html",enableSorting:!0,data:i,columnDefs:[{field:"status",name:"Status"},{field:"count",name:"Count"}]}},j=[];a.labeled_jobs=function(b){switch(a.current_job_label=b,b){case c:j=f;break;case d:j=g;break;case e:j=h}a.labeled_jobs_grid={enableSorting:!0,data:j,columnDefs:[{field:"id",name:"Schedule ID",cellTemplate:"views/cell_template.html"},{field:"name",name:"Name"},{field:"command_type",name:"Command"}]},a.show_labeled_jobs=!0},a.close_labeled_jobs=function(){a.show_labeled_jobs=!1,a.close_job()},i(a.jobs),a.show_labeled_jobs=!1,a.labeled_jobs_grid={data:[]},a.show_job=function(b){a.show_job_flag=!0,a.current_job=j[b]},a.close_job=function(){a.show_job_flag=!1,a.current_job=[]}}]);var data={paging_info:{next_page:2,previous_page:null,per_page:10},schedules:[{id:3871,name:"UDS-TrackerDataLoad_Manual",status:"KILLED",concurrency:5,frequency:30,time_unit:"minutes",no_catch_up:!1,cron_expression:"",user_id:507,start_time:"2015-07-09 08:00",end_time:"2018-07-09 23:30",time_zone:"UTC",next_materialized_time:"2015-07-10 09:00",command:{query:"drop table if exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;\ncreate external table if not exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$ (is_rtb int, timestamp int, user_id string, proto string) \nROW FORMAT DELIMITED FIELDS TERMINATED by '\\t' LINES TERMINATED BY '\\n'\nLOCATION 's3n://komliudslogs/tracker/$year$/$month$/$day$/$hour$/$minute$/';\nset hive.optimize.s3.query=true;\nadd jar s3://komliudsdev/jars/logp-common-2.0.jar;\nadd jar s3://komliudsdev/jars/hiveUdfs-1.0.jar;\nCREATE temporary function protoread AS 'com.komli.hive.udfs.TrackerProtoDeserializer';\n\nINSERT OVERWRITE TABLE udsprod.trackerevent PARTITION(ts_date='$year$-$month$-$day$', ts_hour='$hour$', ts_minute='$minute$')\nSELECT tr.timestamp, tr.isLearning, tr.edgeServerId, tr.sourceComponent, tr.aggregatorId,\n        tr.requestUri, tr.userCookie, tr.userIp, tr.countryId, tr.regionId, tr.cityId, tr.metroId, \n        tr.dma, tr.timeZone, tr.userAgent, tr.publisherId, tr.siteId, tr.foldPosition, tr.refererUrl, \n        tr.uniqueResponseId, tr.uniqueRowId, tr.trackerServerId, tr.dataVersion, tr.totalProcessingTime, \n        tr.intializationTime, tr.requestParsingTime, tr.requestProcessingTime, tr.advertiserId, tr.advertiserIoId,\n        tr.advertiserLiId, tr.creativeId, tr.inventroySourceId, tr.bidStrategyTypeId, tr.pixelId,\n        tr.contentCategoryId, tr.userSegmentId, tr.creativeWidth, tr.creativeHeight, tr.creativeBucketizedHeight,\n        tr.creativeBucketizedWidth, tr.bucketizeAdvertiserLineItemFrequency, tr.trackingType, tr.winningBid,\n        tr.impressions, tr.conversions, tr.clicks, tr.creativeOfferType, tr.statusCode,\n        tr.impressionClickValidationStatusCode, tr.conversionType, tr.advertiserTargetingExpression,\n        tr.userSegments, tr.creativeViewFrequency, tr.creativeClickFrequency, tr.advIOViewFrequency, \n        tr.advIOClickFrequency, tr.impressionPiggybackPixelIds, tr.creativeViewFrequencyOld, tr.dataCenterId, \n        tr.adSpotId, tr.pageType, tr.numSlots, tr.slotPosition, tr.debugStatusCode, tr.targetedSegmentIds,\n        tr.blockedSegmentIds, tr.revenue, tr.budgetSpent, tr.conversionInfo, tr.impressionTime, tr.clickTime,\n        tr.userSignals, tr.sourceType, tr.osId, tr.deviceBrand, tr.deviceModel, tr.deviceType, tr.browser,\n        tr.cost, tr.moneySpent, tr.attributionRatio\nFROM (SELECT rt.timestamp, rt.isLearning, rt.edgeServerId, rt.sourceComponent, rt.aggregatorId,\n		rt.requestUri,\n		CASE WHEN (rt.userCookie is null ) THEN null ELSE get_json_object(rt.userCookie, '$.userId') END AS userCookie,\n		rt.userIp, rt.countryId, rt.regionId, rt.cityId, rt.metroId, rt.dma, rt.timeZone,\n		rt.userAgent, rt.publisherId, rt.siteId, rt.foldPosition, rt.refererUrl, rt.uniqueResponseId,\n		rt.uniqueRowId, rt.trackerServerId, rt.dataVersion, rt.totalProcessingTime, rt.intializationTime,\n		rt.requestParsingTime, rt.requestProcessingTime, rt.advertiserId, rt.advertiserIoId,\n		rt.advertiserLiId, rt.creativeId, rt.inventroySourceId, rt.bidStrategyTypeId, rt.pixelId,\n		rt.contentCategoryId, rt.userSegmentId, rt.creativeWidth, rt.creativeHeight, rt.creativeBucketizedHeight,\n		rt.creativeBucketizedWidth, rt.bucketizeAdvertiserLineItemFrequency, rt.trackingType, rt.winningBid,\n		rt.impressions, rt.conversions, rt.clicks, rt.creativeOfferType, rt.statusCode,\n		rt.impressionClickValidationStatusCode, rt.conversionType, rt.advertiserTargetingExpression,\n		CASE WHEN (rt.userSegments is null) THEN null ELSE SPLIT(regexp_replace(get_json_object(concat('{\\\"userSegments\\\":',rt.userSegments,'}'), '$.userSegments.segmentId'), '\\\\[|\\\\]',''),',') END as userSegments,\n		rt.creativeViewFrequency, rt.creativeClickFrequency, rt.advIOViewFrequency, rt.advIOClickFrequency,\n		CASE WHEN (rt.impressionPiggybackPixelIds is null) THEN null ELSE SPLIT(regexp_replace(rt.impressionPiggybackPixelIds, '\\\\[|\\\\]',''),',') END AS impressionPiggybackPixelIds,\n		rt.creativeViewFrequencyOld, rt.dataCenterId, rt.adSpotId,\n		rt.pageType, rt.numSlots, rt.slotPosition, rt.debugStatusCode,\n		CASE WHEN (rt.targetedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.targetedSegmentIds, '\\\\[|\\\\]',''),',') END AS targetedSegmentIds,\n		CASE WHEN (rt.blockedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.blockedSegmentIds, '\\\\[|\\\\]',''),',') END AS blockedSegmentIds,\n		rt.revenue, rt.budgetSpent,\n		CASE WHEN (rt.conversionInfo is null) THEN null ELSE str_to_map(regexp_replace(rt.conversionInfo, '\\\"|\\\\{|\\\\}', ''),'\\,',':') END AS conversionInfo,\n		rt.impressionTime, rt.clickTime,\n		CASE WHEN (rt.userSignals is null) THEN null ELSE str_to_map(regexp_replace(rt.userSignals, '\\\"|\\\\{|\\\\}', ''), '\\,',':') END AS userSignals,\n		rt.sourceType, rt.osId, rt.deviceBrand, rt.deviceModel, rt.deviceType, rt.browser,\n		rt.cost, rt.moneySpent, rt.attributionRatio,\n		to_date(from_unixtime(cast(rt.timestamp as int))) as ts_date,\n	        hour(from_unixtime(cast(rt.timestamp as int))) as ts_hour,\n	        CASE WHEN( cast(minute(from_unixtime(cast(rt.timestamp as int))) as int)/30<1) THEN '0' ELSE '30' END as ts_minute\n	FROM loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$\n	LATERAL VIEW json_tuple(protoread(proto), 'timestamp', 'isLearning', 'edgeServerId', 'sourceComponent', 'aggregatorId',\n	'requestUri', 'userId', 'userIp', 'countryId', 'regionId', 'cityId', 'metroId', 'dma', 'timeZone', 'userAgent',\n	'publisherId', 'siteId', 'foldPosition', 'refererUrl', 'uniqueResponseId', 'uniqueRowId', 'trackerServerId',\n	'dataVersion', 'totalProcessingTime', 'intializationTime', 'requestParsingTime', 'requestProcessingTime',\n	'advertiserId', 'advertiserIoId', 'advertiserLiId', 'creativeId', 'inventroySourceId', 'bidStrategyTypeId',\n	'pixelId', 'contentCategoryId', 'userSegmentId', 'creativeWidth', 'creativeHeight', 'creativeBucketizedHeight',\n	'creativeBucketizedWidth', 'bucketizeAdvertiserLineItemFrequency', 'trackingType', 'winningBid', 'impressions',\n	'conversions', 'clicks', 'creativeOfferType', 'statusCode', 'impressionClickValidationStatusCode', 'conversionType',\n	'advertiserTargetingExpression', 'userSegments', 'creativeViewFrequency', 'creativeClickFrequency', 'advIOViewFrequency',\n	'advIOClickFrequency', 'impressionPiggybackPixelIds', 'creativeViewFrequencyOld', 'dataCenterId', 'adSpotId', 'pageType',\n	'numSlots', 'slotPosition', 'debugStatusCode', 'targetedSegmentIds', 'blockedSegmentIds', 'revenue', 'budgetSpent',\n	'conversionInfo', 'impressionTime', 'clickTime', 'userSignals', 'sourceType', 'osId', 'deviceBrand', 'deviceModel',\n	'deviceType', 'browser', 'cost', 'moneySpent', 'attributionRatio') rt as \n	timestamp, isLearning, edgeServerId, sourceComponent, aggregatorId, requestUri, userCookie, userIp, countryId, regionId,\n	cityId, metroId, dma, timeZone, userAgent, publisherId, siteId, foldPosition, refererUrl, uniqueResponseId, uniqueRowId,\n	trackerServerId, dataVersion, totalProcessingTime, intializationTime, requestParsingTime, requestProcessingTime, advertiserId,\n	advertiserIoId, advertiserLiId, creativeId, inventroySourceId, bidStrategyTypeId, pixelId, contentCategoryId, userSegmentId,\n	creativeWidth, creativeHeight, creativeBucketizedHeight, creativeBucketizedWidth, bucketizeAdvertiserLineItemFrequency,\n	trackingType, winningBid, impressions, conversions, clicks, creativeOfferType, statusCode, impressionClickValidationStatusCode,\n	conversionType, advertiserTargetingExpression, userSegments, creativeViewFrequency, creativeClickFrequency, advIOViewFrequency,\n	advIOClickFrequency, impressionPiggybackPixelIds, creativeViewFrequencyOld, dataCenterId, adSpotId, pageType, numSlots,\n	slotPosition, debugStatusCode, targetedSegmentIds, blockedSegmentIds, revenue, budgetSpent, conversionInfo, impressionTime,\n	clickTime, userSignals, sourceType, osId, deviceBrand, deviceModel, deviceType, browser, cost, moneySpent, attributionRatio) tr \nwhere tr.ts_date='$year$_$month$_$day$' and cast(tr.ts_hour as int)=cast(\"$hour$\" as int) and cast(tr.ts_minute as int)=cast(\"$minute$\" as int);\nDROP TABLE loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;",sample:!1,approx_mode:!1,approx_aggregations:!1,loader_table_name:null,loader_stable:null,md_cmd:null,script_location:null,retry:0},dependency_info:{files:[{id:"file1",window_start:"-2",path:"s3://komliudslogs/tracker/%Y/%m/%d/%H/%M",window_end:"-2"}]},incremental:{},time_out:600,command_type:"HiveCommand",macros:[{year:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%Y')"},{month:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%m')"},{day:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%d')"},{hour:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%H')"},{minute:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%M')"}],template:"generic",pool:null,label:"default",is_digest:!1,can_notify:!0,digest_time_hour:0,digest_time_minute:0,email_list:"shailesh.garg@komli.com",bitmap:3},{id:3872,name:"UDS-TrackerDataLoad_July8_10Fix",status:"DONE",concurrency:5,frequency:30,time_unit:"minutes",no_catch_up:!1,cron_expression:"",user_id:507,start_time:"2015-07-08 00:00",end_time:"2015-07-10 23:30",time_zone:"UTC",next_materialized_time:"2015-07-11 00:00",command:{query:"drop table if exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;\ncreate external table if not exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$ (is_rtb int, timestamp int, user_id string, proto string) \nROW FORMAT DELIMITED FIELDS TERMINATED by '\\t' LINES TERMINATED BY '\\n'\nLOCATION 's3n://komliudslogs/tracker/$year$/$month$/$day$/$hour$/$minute$/';\nset hive.optimize.s3.query=true;\nadd jar s3://komliudsdev/jars/logp-common-2.0.jar;\nadd jar s3://komliudsdev/jars/hiveUdfs-1.0.jar;\nCREATE temporary function protoread AS 'com.komli.hive.udfs.TrackerProtoDeserializer';\n\nINSERT OVERWRITE TABLE udsprod.trackerevent PARTITION(ts_date='$year$-$month$-$day$', ts_hour='$hour$', ts_minute='$minute$')\nSELECT tr.timestamp, tr.isLearning, tr.edgeServerId, tr.sourceComponent, tr.aggregatorId,\n        tr.requestUri, tr.userCookie, tr.userIp, tr.countryId, tr.regionId, tr.cityId, tr.metroId, \n        tr.dma, tr.timeZone, tr.userAgent, tr.publisherId, tr.siteId, tr.foldPosition, tr.refererUrl, \n        tr.uniqueResponseId, tr.uniqueRowId, tr.trackerServerId, tr.dataVersion, tr.totalProcessingTime, \n        tr.intializationTime, tr.requestParsingTime, tr.requestProcessingTime, tr.advertiserId, tr.advertiserIoId,\n        tr.advertiserLiId, tr.creativeId, tr.inventroySourceId, tr.bidStrategyTypeId, tr.pixelId,\n        tr.contentCategoryId, tr.userSegmentId, tr.creativeWidth, tr.creativeHeight, tr.creativeBucketizedHeight,\n        tr.creativeBucketizedWidth, tr.bucketizeAdvertiserLineItemFrequency, tr.trackingType, tr.winningBid,\n        tr.impressions, tr.conversions, tr.clicks, tr.creativeOfferType, tr.statusCode,\n        tr.impressionClickValidationStatusCode, tr.conversionType, tr.advertiserTargetingExpression,\n        tr.userSegments, tr.creativeViewFrequency, tr.creativeClickFrequency, tr.advIOViewFrequency, \n        tr.advIOClickFrequency, tr.impressionPiggybackPixelIds, tr.creativeViewFrequencyOld, tr.dataCenterId, \n        tr.adSpotId, tr.pageType, tr.numSlots, tr.slotPosition, tr.debugStatusCode, tr.targetedSegmentIds,\n        tr.blockedSegmentIds, tr.revenue, tr.budgetSpent, tr.conversionInfo, tr.impressionTime, tr.clickTime,\n        tr.userSignals, tr.sourceType, tr.osId, tr.deviceBrand, tr.deviceModel, tr.deviceType, tr.browser,\n        tr.cost, tr.moneySpent, tr.attributionRatio\nFROM (SELECT rt.timestamp, rt.isLearning, rt.edgeServerId, rt.sourceComponent, rt.aggregatorId,\n		rt.requestUri,\n		CASE WHEN (rt.userCookie is null ) THEN null ELSE get_json_object(rt.userCookie, '$.userId') END AS userCookie,\n		rt.userIp, rt.countryId, rt.regionId, rt.cityId, rt.metroId, rt.dma, rt.timeZone,\n		rt.userAgent, rt.publisherId, rt.siteId, rt.foldPosition, rt.refererUrl, rt.uniqueResponseId,\n		rt.uniqueRowId, rt.trackerServerId, rt.dataVersion, rt.totalProcessingTime, rt.intializationTime,\n		rt.requestParsingTime, rt.requestProcessingTime, rt.advertiserId, rt.advertiserIoId,\n		rt.advertiserLiId, rt.creativeId, rt.inventroySourceId, rt.bidStrategyTypeId, rt.pixelId,\n		rt.contentCategoryId, rt.userSegmentId, rt.creativeWidth, rt.creativeHeight, rt.creativeBucketizedHeight,\n		rt.creativeBucketizedWidth, rt.bucketizeAdvertiserLineItemFrequency, rt.trackingType, rt.winningBid,\n		rt.impressions, rt.conversions, rt.clicks, rt.creativeOfferType, rt.statusCode,\n		rt.impressionClickValidationStatusCode, rt.conversionType, rt.advertiserTargetingExpression,\n		CASE WHEN (rt.userSegments is null) THEN null ELSE SPLIT(regexp_replace(get_json_object(concat('{\\\"userSegments\\\":',rt.userSegments,'}'), '$.userSegments.segmentId'), '\\\\[|\\\\]',''),',') END as userSegments,\n		rt.creativeViewFrequency, rt.creativeClickFrequency, rt.advIOViewFrequency, rt.advIOClickFrequency,\n		CASE WHEN (rt.impressionPiggybackPixelIds is null) THEN null ELSE SPLIT(regexp_replace(rt.impressionPiggybackPixelIds, '\\\\[|\\\\]',''),',') END AS impressionPiggybackPixelIds,\n		rt.creativeViewFrequencyOld, rt.dataCenterId, rt.adSpotId,\n		rt.pageType, rt.numSlots, rt.slotPosition, rt.debugStatusCode,\n		CASE WHEN (rt.targetedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.targetedSegmentIds, '\\\\[|\\\\]',''),',') END AS targetedSegmentIds,\n		CASE WHEN (rt.blockedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.blockedSegmentIds, '\\\\[|\\\\]',''),',') END AS blockedSegmentIds,\n		rt.revenue, rt.budgetSpent,\n		CASE WHEN (rt.conversionInfo is null) THEN null ELSE str_to_map(regexp_replace(rt.conversionInfo, '\\\"|\\\\{|\\\\}', ''),'\\,',':') END AS conversionInfo,\n		rt.impressionTime, rt.clickTime,\n		CASE WHEN (rt.userSignals is null) THEN null ELSE str_to_map(regexp_replace(rt.userSignals, '\\\"|\\\\{|\\\\}', ''), '\\,',':') END AS userSignals,\n		rt.sourceType, rt.osId, rt.deviceBrand, rt.deviceModel, rt.deviceType, rt.browser,\n		rt.cost, rt.moneySpent, rt.attributionRatio,\n		to_date(from_unixtime(cast(rt.timestamp as int))) as ts_date,\n	        hour(from_unixtime(cast(rt.timestamp as int))) as ts_hour,\n	        CASE WHEN( cast(minute(from_unixtime(cast(rt.timestamp as int))) as int)/30<1) THEN '0' ELSE '30' END as ts_minute\n	FROM loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$\n	LATERAL VIEW json_tuple(protoread(proto), 'timestamp', 'isLearning', 'edgeServerId', 'sourceComponent', 'aggregatorId',\n	'requestUri', 'userId', 'userIp', 'countryId', 'regionId', 'cityId', 'metroId', 'dma', 'timeZone', 'userAgent',\n	'publisherId', 'siteId', 'foldPosition', 'refererUrl', 'uniqueResponseId', 'uniqueRowId', 'trackerServerId',\n	'dataVersion', 'totalProcessingTime', 'intializationTime', 'requestParsingTime', 'requestProcessingTime',\n	'advertiserId', 'advertiserIoId', 'advertiserLiId', 'creativeId', 'inventroySourceId', 'bidStrategyTypeId',\n	'pixelId', 'contentCategoryId', 'userSegmentId', 'creativeWidth', 'creativeHeight', 'creativeBucketizedHeight',\n	'creativeBucketizedWidth', 'bucketizeAdvertiserLineItemFrequency', 'trackingType', 'winningBid', 'impressions',\n	'conversions', 'clicks', 'creativeOfferType', 'statusCode', 'impressionClickValidationStatusCode', 'conversionType',\n	'advertiserTargetingExpression', 'userSegments', 'creativeViewFrequency', 'creativeClickFrequency', 'advIOViewFrequency',\n	'advIOClickFrequency', 'impressionPiggybackPixelIds', 'creativeViewFrequencyOld', 'dataCenterId', 'adSpotId', 'pageType',\n	'numSlots', 'slotPosition', 'debugStatusCode', 'targetedSegmentIds', 'blockedSegmentIds', 'revenue', 'budgetSpent',\n	'conversionInfo', 'impressionTime', 'clickTime', 'userSignals', 'sourceType', 'osId', 'deviceBrand', 'deviceModel',\n	'deviceType', 'browser', 'cost', 'moneySpent', 'attributionRatio') rt as \n	timestamp, isLearning, edgeServerId, sourceComponent, aggregatorId, requestUri, userCookie, userIp, countryId, regionId,\n	cityId, metroId, dma, timeZone, userAgent, publisherId, siteId, foldPosition, refererUrl, uniqueResponseId, uniqueRowId,\n	trackerServerId, dataVersion, totalProcessingTime, intializationTime, requestParsingTime, requestProcessingTime, advertiserId,\n	advertiserIoId, advertiserLiId, creativeId, inventroySourceId, bidStrategyTypeId, pixelId, contentCategoryId, userSegmentId,\n	creativeWidth, creativeHeight, creativeBucketizedHeight, creativeBucketizedWidth, bucketizeAdvertiserLineItemFrequency,\n	trackingType, winningBid, impressions, conversions, clicks, creativeOfferType, statusCode, impressionClickValidationStatusCode,\n	conversionType, advertiserTargetingExpression, userSegments, creativeViewFrequency, creativeClickFrequency, advIOViewFrequency,\n	advIOClickFrequency, impressionPiggybackPixelIds, creativeViewFrequencyOld, dataCenterId, adSpotId, pageType, numSlots,\n	slotPosition, debugStatusCode, targetedSegmentIds, blockedSegmentIds, revenue, budgetSpent, conversionInfo, impressionTime,\n	clickTime, userSignals, sourceType, osId, deviceBrand, deviceModel, deviceType, browser, cost, moneySpent, attributionRatio) tr \nwhere tr.ts_date='$year$-$month$-$day$' and cast(tr.ts_hour as int)=cast(\"$hour$\" as int) and cast(tr.ts_minute as int)=cast(\"$minute$\" as int);\nDROP TABLE loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;",sample:!1,approx_mode:!1,approx_aggregations:!1,loader_table_name:null,loader_stable:null,md_cmd:null,script_location:null,retry:0},dependency_info:{files:[{path:"s3://komliudslogs/tracker/%Y/%m/%d/%H/%M",id:"file1",window_end:"-2",window_start:"-2"}]},incremental:{},time_out:600,command_type:"HiveCommand",macros:[{year:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%Y')"},{month:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%m')"},{day:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%d')"},{hour:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%H')"},{minute:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%M')"}],template:"generic",pool:null,label:"default",is_digest:!1,can_notify:!0,digest_time_hour:0,digest_time_minute:0,email_list:"shailesh.garg@komli.com",bitmap:3},{id:3873,name:"UDS-TrackerDataLoad_Aug2_9Fix",status:"DONE",concurrency:5,frequency:30,time_unit:"minutes",no_catch_up:!1,cron_expression:"",user_id:507,start_time:"2015-08-02 00:00",end_time:"2015-08-09 23:30",time_zone:"UTC",next_materialized_time:"2015-08-10 00:00",command:{query:"drop table if exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;\ncreate external table if not exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$ (is_rtb int, timestamp int, user_id string, proto string) \nROW FORMAT DELIMITED FIELDS TERMINATED by '\\t' LINES TERMINATED BY '\\n'\nLOCATION 's3n://komliudslogs/tracker/$year$/$month$/$day$/$hour$/$minute$/';\nset hive.optimize.s3.query=true;\nadd jar s3://komliudsdev/jars/logp-common-2.0.jar;\nadd jar s3://komliudsdev/jars/hiveUdfs-1.0.jar;\nCREATE temporary function protoread AS 'com.komli.hive.udfs.TrackerProtoDeserializer';\n\nINSERT OVERWRITE TABLE udsprod.trackerevent PARTITION(ts_date='$year$-$month$-$day$', ts_hour='$hour$', ts_minute='$minute$')\nSELECT tr.timestamp, tr.isLearning, tr.edgeServerId, tr.sourceComponent, tr.aggregatorId,\n        tr.requestUri, tr.userCookie, tr.userIp, tr.countryId, tr.regionId, tr.cityId, tr.metroId, \n        tr.dma, tr.timeZone, tr.userAgent, tr.publisherId, tr.siteId, tr.foldPosition, tr.refererUrl, \n        tr.uniqueResponseId, tr.uniqueRowId, tr.trackerServerId, tr.dataVersion, tr.totalProcessingTime, \n        tr.intializationTime, tr.requestParsingTime, tr.requestProcessingTime, tr.advertiserId, tr.advertiserIoId,\n        tr.advertiserLiId, tr.creativeId, tr.inventroySourceId, tr.bidStrategyTypeId, tr.pixelId,\n        tr.contentCategoryId, tr.userSegmentId, tr.creativeWidth, tr.creativeHeight, tr.creativeBucketizedHeight,\n        tr.creativeBucketizedWidth, tr.bucketizeAdvertiserLineItemFrequency, tr.trackingType, tr.winningBid,\n        tr.impressions, tr.conversions, tr.clicks, tr.creativeOfferType, tr.statusCode,\n        tr.impressionClickValidationStatusCode, tr.conversionType, tr.advertiserTargetingExpression,\n        tr.userSegments, tr.creativeViewFrequency, tr.creativeClickFrequency, tr.advIOViewFrequency, \n        tr.advIOClickFrequency, tr.impressionPiggybackPixelIds, tr.creativeViewFrequencyOld, tr.dataCenterId, \n        tr.adSpotId, tr.pageType, tr.numSlots, tr.slotPosition, tr.debugStatusCode, tr.targetedSegmentIds,\n        tr.blockedSegmentIds, tr.revenue, tr.budgetSpent, tr.conversionInfo, tr.impressionTime, tr.clickTime,\n        tr.userSignals, tr.sourceType, tr.osId, tr.deviceBrand, tr.deviceModel, tr.deviceType, tr.browser,\n        tr.cost, tr.moneySpent, tr.attributionRatio\nFROM (SELECT rt.timestamp, rt.isLearning, rt.edgeServerId, rt.sourceComponent, rt.aggregatorId,\n		rt.requestUri,\n		CASE WHEN (rt.userCookie is null ) THEN null ELSE get_json_object(rt.userCookie, '$.userId') END AS userCookie,\n		rt.userIp, rt.countryId, rt.regionId, rt.cityId, rt.metroId, rt.dma, rt.timeZone,\n		rt.userAgent, rt.publisherId, rt.siteId, rt.foldPosition, rt.refererUrl, rt.uniqueResponseId,\n		rt.uniqueRowId, rt.trackerServerId, rt.dataVersion, rt.totalProcessingTime, rt.intializationTime,\n		rt.requestParsingTime, rt.requestProcessingTime, rt.advertiserId, rt.advertiserIoId,\n		rt.advertiserLiId, rt.creativeId, rt.inventroySourceId, rt.bidStrategyTypeId, rt.pixelId,\n		rt.contentCategoryId, rt.userSegmentId, rt.creativeWidth, rt.creativeHeight, rt.creativeBucketizedHeight,\n		rt.creativeBucketizedWidth, rt.bucketizeAdvertiserLineItemFrequency, rt.trackingType, rt.winningBid,\n		rt.impressions, rt.conversions, rt.clicks, rt.creativeOfferType, rt.statusCode,\n		rt.impressionClickValidationStatusCode, rt.conversionType, rt.advertiserTargetingExpression,\n		CASE WHEN (rt.userSegments is null) THEN null ELSE SPLIT(regexp_replace(get_json_object(concat('{\\\"userSegments\\\":',rt.userSegments,'}'), '$.userSegments.segmentId'), '\\\\[|\\\\]',''),',') END as userSegments,\n		rt.creativeViewFrequency, rt.creativeClickFrequency, rt.advIOViewFrequency, rt.advIOClickFrequency,\n		CASE WHEN (rt.impressionPiggybackPixelIds is null) THEN null ELSE SPLIT(regexp_replace(rt.impressionPiggybackPixelIds, '\\\\[|\\\\]',''),',') END AS impressionPiggybackPixelIds,\n		rt.creativeViewFrequencyOld, rt.dataCenterId, rt.adSpotId,\n		rt.pageType, rt.numSlots, rt.slotPosition, rt.debugStatusCode,\n		CASE WHEN (rt.targetedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.targetedSegmentIds, '\\\\[|\\\\]',''),',') END AS targetedSegmentIds,\n		CASE WHEN (rt.blockedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.blockedSegmentIds, '\\\\[|\\\\]',''),',') END AS blockedSegmentIds,\n		rt.revenue, rt.budgetSpent,\n		CASE WHEN (rt.conversionInfo is null) THEN null ELSE str_to_map(regexp_replace(rt.conversionInfo, '\\\"|\\\\{|\\\\}', ''),'\\,',':') END AS conversionInfo,\n		rt.impressionTime, rt.clickTime,\n		CASE WHEN (rt.userSignals is null) THEN null ELSE str_to_map(regexp_replace(rt.userSignals, '\\\"|\\\\{|\\\\}', ''), '\\,',':') END AS userSignals,\n		rt.sourceType, rt.osId, rt.deviceBrand, rt.deviceModel, rt.deviceType, rt.browser,\n		rt.cost, rt.moneySpent, rt.attributionRatio,\n		to_date(from_unixtime(cast(rt.timestamp as int))) as ts_date,\n	        hour(from_unixtime(cast(rt.timestamp as int))) as ts_hour,\n	        CASE WHEN( cast(minute(from_unixtime(cast(rt.timestamp as int))) as int)/30<1) THEN '0' ELSE '30' END as ts_minute\n	FROM loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$\n	LATERAL VIEW json_tuple(protoread(proto), 'timestamp', 'isLearning', 'edgeServerId', 'sourceComponent', 'aggregatorId',\n	'requestUri', 'userId', 'userIp', 'countryId', 'regionId', 'cityId', 'metroId', 'dma', 'timeZone', 'userAgent',\n	'publisherId', 'siteId', 'foldPosition', 'refererUrl', 'uniqueResponseId', 'uniqueRowId', 'trackerServerId',\n	'dataVersion', 'totalProcessingTime', 'intializationTime', 'requestParsingTime', 'requestProcessingTime',\n	'advertiserId', 'advertiserIoId', 'advertiserLiId', 'creativeId', 'inventroySourceId', 'bidStrategyTypeId',\n	'pixelId', 'contentCategoryId', 'userSegmentId', 'creativeWidth', 'creativeHeight', 'creativeBucketizedHeight',\n	'creativeBucketizedWidth', 'bucketizeAdvertiserLineItemFrequency', 'trackingType', 'winningBid', 'impressions',\n	'conversions', 'clicks', 'creativeOfferType', 'statusCode', 'impressionClickValidationStatusCode', 'conversionType',\n	'advertiserTargetingExpression', 'userSegments', 'creativeViewFrequency', 'creativeClickFrequency', 'advIOViewFrequency',\n	'advIOClickFrequency', 'impressionPiggybackPixelIds', 'creativeViewFrequencyOld', 'dataCenterId', 'adSpotId', 'pageType',\n	'numSlots', 'slotPosition', 'debugStatusCode', 'targetedSegmentIds', 'blockedSegmentIds', 'revenue', 'budgetSpent',\n	'conversionInfo', 'impressionTime', 'clickTime', 'userSignals', 'sourceType', 'osId', 'deviceBrand', 'deviceModel',\n	'deviceType', 'browser', 'cost', 'moneySpent', 'attributionRatio') rt as \n	timestamp, isLearning, edgeServerId, sourceComponent, aggregatorId, requestUri, userCookie, userIp, countryId, regionId,\n	cityId, metroId, dma, timeZone, userAgent, publisherId, siteId, foldPosition, refererUrl, uniqueResponseId, uniqueRowId,\n	trackerServerId, dataVersion, totalProcessingTime, intializationTime, requestParsingTime, requestProcessingTime, advertiserId,\n	advertiserIoId, advertiserLiId, creativeId, inventroySourceId, bidStrategyTypeId, pixelId, contentCategoryId, userSegmentId,\n	creativeWidth, creativeHeight, creativeBucketizedHeight, creativeBucketizedWidth, bucketizeAdvertiserLineItemFrequency,\n	trackingType, winningBid, impressions, conversions, clicks, creativeOfferType, statusCode, impressionClickValidationStatusCode,\n	conversionType, advertiserTargetingExpression, userSegments, creativeViewFrequency, creativeClickFrequency, advIOViewFrequency,\n	advIOClickFrequency, impressionPiggybackPixelIds, creativeViewFrequencyOld, dataCenterId, adSpotId, pageType, numSlots,\n	slotPosition, debugStatusCode, targetedSegmentIds, blockedSegmentIds, revenue, budgetSpent, conversionInfo, impressionTime,\n	clickTime, userSignals, sourceType, osId, deviceBrand, deviceModel, deviceType, browser, cost, moneySpent, attributionRatio) tr \nwhere tr.ts_date='$year$-$month$-$day$' and cast(tr.ts_hour as int)=cast(\"$hour$\" as int) and cast(tr.ts_minute as int)=cast(\"$minute$\" as int);\nDROP TABLE loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;",sample:!1,approx_mode:!1,approx_aggregations:!1,loader_table_name:null,loader_stable:null,md_cmd:null,script_location:null,retry:0},dependency_info:{files:[{id:"file1",window_start:"-2",path:"s3://komliudslogs/tracker/%Y/%m/%d/%H/%M",window_end:"-2"}]},incremental:{},time_out:600,command_type:"HiveCommand",macros:[{year:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%Y')"},{month:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%m')"},{day:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%d')"},{hour:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%H')"},{minute:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%M')"}],template:"generic",pool:null,label:"default",is_digest:!1,can_notify:!0,digest_time_hour:0,digest_time_minute:0,email_list:"shailesh.garg@komli.com",bitmap:3},{id:3874,name:"UDS-TrackerDataLoad_Aug10_14Fix",status:"DONE",concurrency:5,frequency:30,time_unit:"minutes",no_catch_up:!1,cron_expression:"",user_id:507,start_time:"2015-08-10 00:00",end_time:"2015-08-14 23:30",time_zone:"UTC",next_materialized_time:"2015-08-15 00:00",command:{query:"drop table if exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;\ncreate external table if not exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$ (is_rtb int, timestamp int, user_id string, proto string) \nROW FORMAT DELIMITED FIELDS TERMINATED by '\\t' LINES TERMINATED BY '\\n'\nLOCATION 's3n://komliudslogs/tracker/$year$/$month$/$day$/$hour$/$minute$/';\nset hive.optimize.s3.query=true;\nadd jar s3://komliudsdev/jars/logp-common-2.0.jar;\nadd jar s3://komliudsdev/jars/hiveUdfs-1.0.jar;\nCREATE temporary function protoread AS 'com.komli.hive.udfs.TrackerProtoDeserializer';\n\nINSERT OVERWRITE TABLE udsprod.trackerevent PARTITION(ts_date='$year$-$month$-$day$', ts_hour='$hour$', ts_minute='$minute$')\nSELECT tr.timestamp, tr.isLearning, tr.edgeServerId, tr.sourceComponent, tr.aggregatorId,\n        tr.requestUri, tr.userCookie, tr.userIp, tr.countryId, tr.regionId, tr.cityId, tr.metroId, \n        tr.dma, tr.timeZone, tr.userAgent, tr.publisherId, tr.siteId, tr.foldPosition, tr.refererUrl, \n        tr.uniqueResponseId, tr.uniqueRowId, tr.trackerServerId, tr.dataVersion, tr.totalProcessingTime, \n        tr.intializationTime, tr.requestParsingTime, tr.requestProcessingTime, tr.advertiserId, tr.advertiserIoId,\n        tr.advertiserLiId, tr.creativeId, tr.inventroySourceId, tr.bidStrategyTypeId, tr.pixelId,\n        tr.contentCategoryId, tr.userSegmentId, tr.creativeWidth, tr.creativeHeight, tr.creativeBucketizedHeight,\n        tr.creativeBucketizedWidth, tr.bucketizeAdvertiserLineItemFrequency, tr.trackingType, tr.winningBid,\n        tr.impressions, tr.conversions, tr.clicks, tr.creativeOfferType, tr.statusCode,\n        tr.impressionClickValidationStatusCode, tr.conversionType, tr.advertiserTargetingExpression,\n        tr.userSegments, tr.creativeViewFrequency, tr.creativeClickFrequency, tr.advIOViewFrequency, \n        tr.advIOClickFrequency, tr.impressionPiggybackPixelIds, tr.creativeViewFrequencyOld, tr.dataCenterId, \n        tr.adSpotId, tr.pageType, tr.numSlots, tr.slotPosition, tr.debugStatusCode, tr.targetedSegmentIds,\n        tr.blockedSegmentIds, tr.revenue, tr.budgetSpent, tr.conversionInfo, tr.impressionTime, tr.clickTime,\n        tr.userSignals, tr.sourceType, tr.osId, tr.deviceBrand, tr.deviceModel, tr.deviceType, tr.browser,\n        tr.cost, tr.moneySpent, tr.attributionRatio\nFROM (SELECT rt.timestamp, rt.isLearning, rt.edgeServerId, rt.sourceComponent, rt.aggregatorId,\n		rt.requestUri,\n		CASE WHEN (rt.userCookie is null ) THEN null ELSE get_json_object(rt.userCookie, '$.userId') END AS userCookie,\n		rt.userIp, rt.countryId, rt.regionId, rt.cityId, rt.metroId, rt.dma, rt.timeZone,\n		rt.userAgent, rt.publisherId, rt.siteId, rt.foldPosition, rt.refererUrl, rt.uniqueResponseId,\n		rt.uniqueRowId, rt.trackerServerId, rt.dataVersion, rt.totalProcessingTime, rt.intializationTime,\n		rt.requestParsingTime, rt.requestProcessingTime, rt.advertiserId, rt.advertiserIoId,\n		rt.advertiserLiId, rt.creativeId, rt.inventroySourceId, rt.bidStrategyTypeId, rt.pixelId,\n		rt.contentCategoryId, rt.userSegmentId, rt.creativeWidth, rt.creativeHeight, rt.creativeBucketizedHeight,\n		rt.creativeBucketizedWidth, rt.bucketizeAdvertiserLineItemFrequency, rt.trackingType, rt.winningBid,\n		rt.impressions, rt.conversions, rt.clicks, rt.creativeOfferType, rt.statusCode,\n		rt.impressionClickValidationStatusCode, rt.conversionType, rt.advertiserTargetingExpression,\n		CASE WHEN (rt.userSegments is null) THEN null ELSE SPLIT(regexp_replace(get_json_object(concat('{\\\"userSegments\\\":',rt.userSegments,'}'), '$.userSegments.segmentId'), '\\\\[|\\\\]',''),',') END as userSegments,\n		rt.creativeViewFrequency, rt.creativeClickFrequency, rt.advIOViewFrequency, rt.advIOClickFrequency,\n		CASE WHEN (rt.impressionPiggybackPixelIds is null) THEN null ELSE SPLIT(regexp_replace(rt.impressionPiggybackPixelIds, '\\\\[|\\\\]',''),',') END AS impressionPiggybackPixelIds,\n		rt.creativeViewFrequencyOld, rt.dataCenterId, rt.adSpotId,\n		rt.pageType, rt.numSlots, rt.slotPosition, rt.debugStatusCode,\n		CASE WHEN (rt.targetedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.targetedSegmentIds, '\\\\[|\\\\]',''),',') END AS targetedSegmentIds,\n		CASE WHEN (rt.blockedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.blockedSegmentIds, '\\\\[|\\\\]',''),',') END AS blockedSegmentIds,\n		rt.revenue, rt.budgetSpent,\n		CASE WHEN (rt.conversionInfo is null) THEN null ELSE str_to_map(regexp_replace(rt.conversionInfo, '\\\"|\\\\{|\\\\}', ''),'\\,',':') END AS conversionInfo,\n		rt.impressionTime, rt.clickTime,\n		CASE WHEN (rt.userSignals is null) THEN null ELSE str_to_map(regexp_replace(rt.userSignals, '\\\"|\\\\{|\\\\}', ''), '\\,',':') END AS userSignals,\n		rt.sourceType, rt.osId, rt.deviceBrand, rt.deviceModel, rt.deviceType, rt.browser,\n		rt.cost, rt.moneySpent, rt.attributionRatio,\n		to_date(from_unixtime(cast(rt.timestamp as int))) as ts_date,\n	        hour(from_unixtime(cast(rt.timestamp as int))) as ts_hour,\n	        CASE WHEN( cast(minute(from_unixtime(cast(rt.timestamp as int))) as int)/30<1) THEN '0' ELSE '30' END as ts_minute\n	FROM loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$\n	LATERAL VIEW json_tuple(protoread(proto), 'timestamp', 'isLearning', 'edgeServerId', 'sourceComponent', 'aggregatorId',\n	'requestUri', 'userId', 'userIp', 'countryId', 'regionId', 'cityId', 'metroId', 'dma', 'timeZone', 'userAgent',\n	'publisherId', 'siteId', 'foldPosition', 'refererUrl', 'uniqueResponseId', 'uniqueRowId', 'trackerServerId',\n	'dataVersion', 'totalProcessingTime', 'intializationTime', 'requestParsingTime', 'requestProcessingTime',\n	'advertiserId', 'advertiserIoId', 'advertiserLiId', 'creativeId', 'inventroySourceId', 'bidStrategyTypeId',\n	'pixelId', 'contentCategoryId', 'userSegmentId', 'creativeWidth', 'creativeHeight', 'creativeBucketizedHeight',\n	'creativeBucketizedWidth', 'bucketizeAdvertiserLineItemFrequency', 'trackingType', 'winningBid', 'impressions',\n	'conversions', 'clicks', 'creativeOfferType', 'statusCode', 'impressionClickValidationStatusCode', 'conversionType',\n	'advertiserTargetingExpression', 'userSegments', 'creativeViewFrequency', 'creativeClickFrequency', 'advIOViewFrequency',\n	'advIOClickFrequency', 'impressionPiggybackPixelIds', 'creativeViewFrequencyOld', 'dataCenterId', 'adSpotId', 'pageType',\n	'numSlots', 'slotPosition', 'debugStatusCode', 'targetedSegmentIds', 'blockedSegmentIds', 'revenue', 'budgetSpent',\n	'conversionInfo', 'impressionTime', 'clickTime', 'userSignals', 'sourceType', 'osId', 'deviceBrand', 'deviceModel',\n	'deviceType', 'browser', 'cost', 'moneySpent', 'attributionRatio') rt as \n	timestamp, isLearning, edgeServerId, sourceComponent, aggregatorId, requestUri, userCookie, userIp, countryId, regionId,\n	cityId, metroId, dma, timeZone, userAgent, publisherId, siteId, foldPosition, refererUrl, uniqueResponseId, uniqueRowId,\n	trackerServerId, dataVersion, totalProcessingTime, intializationTime, requestParsingTime, requestProcessingTime, advertiserId,\n	advertiserIoId, advertiserLiId, creativeId, inventroySourceId, bidStrategyTypeId, pixelId, contentCategoryId, userSegmentId,\n	creativeWidth, creativeHeight, creativeBucketizedHeight, creativeBucketizedWidth, bucketizeAdvertiserLineItemFrequency,\n	trackingType, winningBid, impressions, conversions, clicks, creativeOfferType, statusCode, impressionClickValidationStatusCode,\n	conversionType, advertiserTargetingExpression, userSegments, creativeViewFrequency, creativeClickFrequency, advIOViewFrequency,\n	advIOClickFrequency, impressionPiggybackPixelIds, creativeViewFrequencyOld, dataCenterId, adSpotId, pageType, numSlots,\n	slotPosition, debugStatusCode, targetedSegmentIds, blockedSegmentIds, revenue, budgetSpent, conversionInfo, impressionTime,\n	clickTime, userSignals, sourceType, osId, deviceBrand, deviceModel, deviceType, browser, cost, moneySpent, attributionRatio) tr \nwhere tr.ts_date='$year$-$month$-$day$' and cast(tr.ts_hour as int)=cast(\"$hour$\" as int) and cast(tr.ts_minute as int)=cast(\"$minute$\" as int);\nDROP TABLE loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;",
sample:!1,approx_mode:!1,approx_aggregations:!1,loader_table_name:null,loader_stable:null,md_cmd:null,script_location:null,retry:0},dependency_info:{files:[{id:"file1",window_end:"-2",path:"s3://komliudslogs/tracker/%Y/%m/%d/%H/%M",window_start:"-2"}]},incremental:{},time_out:600,command_type:"HiveCommand",macros:[{year:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%Y')"},{month:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%m')"},{day:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%d')"},{hour:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%H')"},{minute:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%M')"}],template:"generic",pool:null,label:"default",is_digest:!1,can_notify:!0,digest_time_hour:0,digest_time_minute:0,email_list:"shailesh.garg@komli.com",bitmap:3},{id:3875,name:"UDS-TrackerDataLoad_July11_15Fix",status:"DONE",concurrency:5,frequency:30,time_unit:"minutes",no_catch_up:!1,cron_expression:"",user_id:507,start_time:"2015-07-11 00:00",end_time:"2015-07-15 23:30",time_zone:"UTC",next_materialized_time:"2015-07-16 00:00",command:{query:"drop table if exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;\ncreate external table if not exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$ (is_rtb int, timestamp int, user_id string, proto string) \nROW FORMAT DELIMITED FIELDS TERMINATED by '\\t' LINES TERMINATED BY '\\n'\nLOCATION 's3n://komliudslogs/tracker/$year$/$month$/$day$/$hour$/$minute$/';\nset hive.optimize.s3.query=true;\nadd jar s3://komliudsdev/jars/logp-common-2.0.jar;\nadd jar s3://komliudsdev/jars/hiveUdfs-1.0.jar;\nCREATE temporary function protoread AS 'com.komli.hive.udfs.TrackerProtoDeserializer';\n\nINSERT OVERWRITE TABLE udsprod.trackerevent PARTITION(ts_date='$year$-$month$-$day$', ts_hour='$hour$', ts_minute='$minute$')\nSELECT tr.timestamp, tr.isLearning, tr.edgeServerId, tr.sourceComponent, tr.aggregatorId,\n        tr.requestUri, tr.userCookie, tr.userIp, tr.countryId, tr.regionId, tr.cityId, tr.metroId, \n        tr.dma, tr.timeZone, tr.userAgent, tr.publisherId, tr.siteId, tr.foldPosition, tr.refererUrl, \n        tr.uniqueResponseId, tr.uniqueRowId, tr.trackerServerId, tr.dataVersion, tr.totalProcessingTime, \n        tr.intializationTime, tr.requestParsingTime, tr.requestProcessingTime, tr.advertiserId, tr.advertiserIoId,\n        tr.advertiserLiId, tr.creativeId, tr.inventroySourceId, tr.bidStrategyTypeId, tr.pixelId,\n        tr.contentCategoryId, tr.userSegmentId, tr.creativeWidth, tr.creativeHeight, tr.creativeBucketizedHeight,\n        tr.creativeBucketizedWidth, tr.bucketizeAdvertiserLineItemFrequency, tr.trackingType, tr.winningBid,\n        tr.impressions, tr.conversions, tr.clicks, tr.creativeOfferType, tr.statusCode,\n        tr.impressionClickValidationStatusCode, tr.conversionType, tr.advertiserTargetingExpression,\n        tr.userSegments, tr.creativeViewFrequency, tr.creativeClickFrequency, tr.advIOViewFrequency, \n        tr.advIOClickFrequency, tr.impressionPiggybackPixelIds, tr.creativeViewFrequencyOld, tr.dataCenterId, \n        tr.adSpotId, tr.pageType, tr.numSlots, tr.slotPosition, tr.debugStatusCode, tr.targetedSegmentIds,\n        tr.blockedSegmentIds, tr.revenue, tr.budgetSpent, tr.conversionInfo, tr.impressionTime, tr.clickTime,\n        tr.userSignals, tr.sourceType, tr.osId, tr.deviceBrand, tr.deviceModel, tr.deviceType, tr.browser,\n        tr.cost, tr.moneySpent, tr.attributionRatio\nFROM (SELECT rt.timestamp, rt.isLearning, rt.edgeServerId, rt.sourceComponent, rt.aggregatorId,\n		rt.requestUri,\n		CASE WHEN (rt.userCookie is null ) THEN null ELSE get_json_object(rt.userCookie, '$.userId') END AS userCookie,\n		rt.userIp, rt.countryId, rt.regionId, rt.cityId, rt.metroId, rt.dma, rt.timeZone,\n		rt.userAgent, rt.publisherId, rt.siteId, rt.foldPosition, rt.refererUrl, rt.uniqueResponseId,\n		rt.uniqueRowId, rt.trackerServerId, rt.dataVersion, rt.totalProcessingTime, rt.intializationTime,\n		rt.requestParsingTime, rt.requestProcessingTime, rt.advertiserId, rt.advertiserIoId,\n		rt.advertiserLiId, rt.creativeId, rt.inventroySourceId, rt.bidStrategyTypeId, rt.pixelId,\n		rt.contentCategoryId, rt.userSegmentId, rt.creativeWidth, rt.creativeHeight, rt.creativeBucketizedHeight,\n		rt.creativeBucketizedWidth, rt.bucketizeAdvertiserLineItemFrequency, rt.trackingType, rt.winningBid,\n		rt.impressions, rt.conversions, rt.clicks, rt.creativeOfferType, rt.statusCode,\n		rt.impressionClickValidationStatusCode, rt.conversionType, rt.advertiserTargetingExpression,\n		CASE WHEN (rt.userSegments is null) THEN null ELSE SPLIT(regexp_replace(get_json_object(concat('{\\\"userSegments\\\":',rt.userSegments,'}'), '$.userSegments.segmentId'), '\\\\[|\\\\]',''),',') END as userSegments,\n		rt.creativeViewFrequency, rt.creativeClickFrequency, rt.advIOViewFrequency, rt.advIOClickFrequency,\n		CASE WHEN (rt.impressionPiggybackPixelIds is null) THEN null ELSE SPLIT(regexp_replace(rt.impressionPiggybackPixelIds, '\\\\[|\\\\]',''),',') END AS impressionPiggybackPixelIds,\n		rt.creativeViewFrequencyOld, rt.dataCenterId, rt.adSpotId,\n		rt.pageType, rt.numSlots, rt.slotPosition, rt.debugStatusCode,\n		CASE WHEN (rt.targetedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.targetedSegmentIds, '\\\\[|\\\\]',''),',') END AS targetedSegmentIds,\n		CASE WHEN (rt.blockedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.blockedSegmentIds, '\\\\[|\\\\]',''),',') END AS blockedSegmentIds,\n		rt.revenue, rt.budgetSpent,\n		CASE WHEN (rt.conversionInfo is null) THEN null ELSE str_to_map(regexp_replace(rt.conversionInfo, '\\\"|\\\\{|\\\\}', ''),'\\,',':') END AS conversionInfo,\n		rt.impressionTime, rt.clickTime,\n		CASE WHEN (rt.userSignals is null) THEN null ELSE str_to_map(regexp_replace(rt.userSignals, '\\\"|\\\\{|\\\\}', ''), '\\,',':') END AS userSignals,\n		rt.sourceType, rt.osId, rt.deviceBrand, rt.deviceModel, rt.deviceType, rt.browser,\n		rt.cost, rt.moneySpent, rt.attributionRatio,\n		to_date(from_unixtime(cast(rt.timestamp as int))) as ts_date,\n	        hour(from_unixtime(cast(rt.timestamp as int))) as ts_hour,\n	        CASE WHEN( cast(minute(from_unixtime(cast(rt.timestamp as int))) as int)/30<1) THEN '0' ELSE '30' END as ts_minute\n	FROM loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$\n	LATERAL VIEW json_tuple(protoread(proto), 'timestamp', 'isLearning', 'edgeServerId', 'sourceComponent', 'aggregatorId',\n	'requestUri', 'userId', 'userIp', 'countryId', 'regionId', 'cityId', 'metroId', 'dma', 'timeZone', 'userAgent',\n	'publisherId', 'siteId', 'foldPosition', 'refererUrl', 'uniqueResponseId', 'uniqueRowId', 'trackerServerId',\n	'dataVersion', 'totalProcessingTime', 'intializationTime', 'requestParsingTime', 'requestProcessingTime',\n	'advertiserId', 'advertiserIoId', 'advertiserLiId', 'creativeId', 'inventroySourceId', 'bidStrategyTypeId',\n	'pixelId', 'contentCategoryId', 'userSegmentId', 'creativeWidth', 'creativeHeight', 'creativeBucketizedHeight',\n	'creativeBucketizedWidth', 'bucketizeAdvertiserLineItemFrequency', 'trackingType', 'winningBid', 'impressions',\n	'conversions', 'clicks', 'creativeOfferType', 'statusCode', 'impressionClickValidationStatusCode', 'conversionType',\n	'advertiserTargetingExpression', 'userSegments', 'creativeViewFrequency', 'creativeClickFrequency', 'advIOViewFrequency',\n	'advIOClickFrequency', 'impressionPiggybackPixelIds', 'creativeViewFrequencyOld', 'dataCenterId', 'adSpotId', 'pageType',\n	'numSlots', 'slotPosition', 'debugStatusCode', 'targetedSegmentIds', 'blockedSegmentIds', 'revenue', 'budgetSpent',\n	'conversionInfo', 'impressionTime', 'clickTime', 'userSignals', 'sourceType', 'osId', 'deviceBrand', 'deviceModel',\n	'deviceType', 'browser', 'cost', 'moneySpent', 'attributionRatio') rt as \n	timestamp, isLearning, edgeServerId, sourceComponent, aggregatorId, requestUri, userCookie, userIp, countryId, regionId,\n	cityId, metroId, dma, timeZone, userAgent, publisherId, siteId, foldPosition, refererUrl, uniqueResponseId, uniqueRowId,\n	trackerServerId, dataVersion, totalProcessingTime, intializationTime, requestParsingTime, requestProcessingTime, advertiserId,\n	advertiserIoId, advertiserLiId, creativeId, inventroySourceId, bidStrategyTypeId, pixelId, contentCategoryId, userSegmentId,\n	creativeWidth, creativeHeight, creativeBucketizedHeight, creativeBucketizedWidth, bucketizeAdvertiserLineItemFrequency,\n	trackingType, winningBid, impressions, conversions, clicks, creativeOfferType, statusCode, impressionClickValidationStatusCode,\n	conversionType, advertiserTargetingExpression, userSegments, creativeViewFrequency, creativeClickFrequency, advIOViewFrequency,\n	advIOClickFrequency, impressionPiggybackPixelIds, creativeViewFrequencyOld, dataCenterId, adSpotId, pageType, numSlots,\n	slotPosition, debugStatusCode, targetedSegmentIds, blockedSegmentIds, revenue, budgetSpent, conversionInfo, impressionTime,\n	clickTime, userSignals, sourceType, osId, deviceBrand, deviceModel, deviceType, browser, cost, moneySpent, attributionRatio) tr \nwhere tr.ts_date='$year$-$month$-$day$' and cast(tr.ts_hour as int)=cast(\"$hour$\" as int) and cast(tr.ts_minute as int)=cast(\"$minute$\" as int);\nDROP TABLE loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;",sample:!1,approx_mode:!1,approx_aggregations:!1,loader_table_name:null,loader_stable:null,md_cmd:null,script_location:null,retry:0},dependency_info:{files:[{window_end:"-2",window_start:"-2",path:"s3://komliudslogs/tracker/%Y/%m/%d/%H/%M",id:"file1"}]},incremental:{},time_out:600,command_type:"HiveCommand",macros:[{year:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%Y')"},{month:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%m')"},{day:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%d')"},{hour:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%H')"},{minute:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%M')"}],template:"generic",pool:null,label:"default",is_digest:!1,can_notify:!0,digest_time_hour:0,digest_time_minute:0,email_list:"shailesh.garg@komli.com",bitmap:3},{id:3876,name:"UDS-TrackerDataLoad_July16_20Fix",status:"DONE",concurrency:5,frequency:30,time_unit:"minutes",no_catch_up:!1,cron_expression:"",user_id:507,start_time:"2015-07-16 00:00",end_time:"2015-07-20 23:30",time_zone:"UTC",next_materialized_time:"2015-07-21 00:00",command:{query:"drop table if exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;\ncreate external table if not exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$ (is_rtb int, timestamp int, user_id string, proto string) \nROW FORMAT DELIMITED FIELDS TERMINATED by '\\t' LINES TERMINATED BY '\\n'\nLOCATION 's3n://komliudslogs/tracker/$year$/$month$/$day$/$hour$/$minute$/';\nset hive.optimize.s3.query=true;\nadd jar s3://komliudsdev/jars/logp-common-2.0.jar;\nadd jar s3://komliudsdev/jars/hiveUdfs-1.0.jar;\nCREATE temporary function protoread AS 'com.komli.hive.udfs.TrackerProtoDeserializer';\n\nINSERT OVERWRITE TABLE udsprod.trackerevent PARTITION(ts_date='$year$-$month$-$day$', ts_hour='$hour$', ts_minute='$minute$')\nSELECT tr.timestamp, tr.isLearning, tr.edgeServerId, tr.sourceComponent, tr.aggregatorId,\n        tr.requestUri, tr.userCookie, tr.userIp, tr.countryId, tr.regionId, tr.cityId, tr.metroId, \n        tr.dma, tr.timeZone, tr.userAgent, tr.publisherId, tr.siteId, tr.foldPosition, tr.refererUrl, \n        tr.uniqueResponseId, tr.uniqueRowId, tr.trackerServerId, tr.dataVersion, tr.totalProcessingTime, \n        tr.intializationTime, tr.requestParsingTime, tr.requestProcessingTime, tr.advertiserId, tr.advertiserIoId,\n        tr.advertiserLiId, tr.creativeId, tr.inventroySourceId, tr.bidStrategyTypeId, tr.pixelId,\n        tr.contentCategoryId, tr.userSegmentId, tr.creativeWidth, tr.creativeHeight, tr.creativeBucketizedHeight,\n        tr.creativeBucketizedWidth, tr.bucketizeAdvertiserLineItemFrequency, tr.trackingType, tr.winningBid,\n        tr.impressions, tr.conversions, tr.clicks, tr.creativeOfferType, tr.statusCode,\n        tr.impressionClickValidationStatusCode, tr.conversionType, tr.advertiserTargetingExpression,\n        tr.userSegments, tr.creativeViewFrequency, tr.creativeClickFrequency, tr.advIOViewFrequency, \n        tr.advIOClickFrequency, tr.impressionPiggybackPixelIds, tr.creativeViewFrequencyOld, tr.dataCenterId, \n        tr.adSpotId, tr.pageType, tr.numSlots, tr.slotPosition, tr.debugStatusCode, tr.targetedSegmentIds,\n        tr.blockedSegmentIds, tr.revenue, tr.budgetSpent, tr.conversionInfo, tr.impressionTime, tr.clickTime,\n        tr.userSignals, tr.sourceType, tr.osId, tr.deviceBrand, tr.deviceModel, tr.deviceType, tr.browser,\n        tr.cost, tr.moneySpent, tr.attributionRatio\nFROM (SELECT rt.timestamp, rt.isLearning, rt.edgeServerId, rt.sourceComponent, rt.aggregatorId,\n		rt.requestUri,\n		CASE WHEN (rt.userCookie is null ) THEN null ELSE get_json_object(rt.userCookie, '$.userId') END AS userCookie,\n		rt.userIp, rt.countryId, rt.regionId, rt.cityId, rt.metroId, rt.dma, rt.timeZone,\n		rt.userAgent, rt.publisherId, rt.siteId, rt.foldPosition, rt.refererUrl, rt.uniqueResponseId,\n		rt.uniqueRowId, rt.trackerServerId, rt.dataVersion, rt.totalProcessingTime, rt.intializationTime,\n		rt.requestParsingTime, rt.requestProcessingTime, rt.advertiserId, rt.advertiserIoId,\n		rt.advertiserLiId, rt.creativeId, rt.inventroySourceId, rt.bidStrategyTypeId, rt.pixelId,\n		rt.contentCategoryId, rt.userSegmentId, rt.creativeWidth, rt.creativeHeight, rt.creativeBucketizedHeight,\n		rt.creativeBucketizedWidth, rt.bucketizeAdvertiserLineItemFrequency, rt.trackingType, rt.winningBid,\n		rt.impressions, rt.conversions, rt.clicks, rt.creativeOfferType, rt.statusCode,\n		rt.impressionClickValidationStatusCode, rt.conversionType, rt.advertiserTargetingExpression,\n		CASE WHEN (rt.userSegments is null) THEN null ELSE SPLIT(regexp_replace(get_json_object(concat('{\\\"userSegments\\\":',rt.userSegments,'}'), '$.userSegments.segmentId'), '\\\\[|\\\\]',''),',') END as userSegments,\n		rt.creativeViewFrequency, rt.creativeClickFrequency, rt.advIOViewFrequency, rt.advIOClickFrequency,\n		CASE WHEN (rt.impressionPiggybackPixelIds is null) THEN null ELSE SPLIT(regexp_replace(rt.impressionPiggybackPixelIds, '\\\\[|\\\\]',''),',') END AS impressionPiggybackPixelIds,\n		rt.creativeViewFrequencyOld, rt.dataCenterId, rt.adSpotId,\n		rt.pageType, rt.numSlots, rt.slotPosition, rt.debugStatusCode,\n		CASE WHEN (rt.targetedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.targetedSegmentIds, '\\\\[|\\\\]',''),',') END AS targetedSegmentIds,\n		CASE WHEN (rt.blockedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.blockedSegmentIds, '\\\\[|\\\\]',''),',') END AS blockedSegmentIds,\n		rt.revenue, rt.budgetSpent,\n		CASE WHEN (rt.conversionInfo is null) THEN null ELSE str_to_map(regexp_replace(rt.conversionInfo, '\\\"|\\\\{|\\\\}', ''),'\\,',':') END AS conversionInfo,\n		rt.impressionTime, rt.clickTime,\n		CASE WHEN (rt.userSignals is null) THEN null ELSE str_to_map(regexp_replace(rt.userSignals, '\\\"|\\\\{|\\\\}', ''), '\\,',':') END AS userSignals,\n		rt.sourceType, rt.osId, rt.deviceBrand, rt.deviceModel, rt.deviceType, rt.browser,\n		rt.cost, rt.moneySpent, rt.attributionRatio,\n		to_date(from_unixtime(cast(rt.timestamp as int))) as ts_date,\n	        hour(from_unixtime(cast(rt.timestamp as int))) as ts_hour,\n	        CASE WHEN( cast(minute(from_unixtime(cast(rt.timestamp as int))) as int)/30<1) THEN '0' ELSE '30' END as ts_minute\n	FROM loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$\n	LATERAL VIEW json_tuple(protoread(proto), 'timestamp', 'isLearning', 'edgeServerId', 'sourceComponent', 'aggregatorId',\n	'requestUri', 'userId', 'userIp', 'countryId', 'regionId', 'cityId', 'metroId', 'dma', 'timeZone', 'userAgent',\n	'publisherId', 'siteId', 'foldPosition', 'refererUrl', 'uniqueResponseId', 'uniqueRowId', 'trackerServerId',\n	'dataVersion', 'totalProcessingTime', 'intializationTime', 'requestParsingTime', 'requestProcessingTime',\n	'advertiserId', 'advertiserIoId', 'advertiserLiId', 'creativeId', 'inventroySourceId', 'bidStrategyTypeId',\n	'pixelId', 'contentCategoryId', 'userSegmentId', 'creativeWidth', 'creativeHeight', 'creativeBucketizedHeight',\n	'creativeBucketizedWidth', 'bucketizeAdvertiserLineItemFrequency', 'trackingType', 'winningBid', 'impressions',\n	'conversions', 'clicks', 'creativeOfferType', 'statusCode', 'impressionClickValidationStatusCode', 'conversionType',\n	'advertiserTargetingExpression', 'userSegments', 'creativeViewFrequency', 'creativeClickFrequency', 'advIOViewFrequency',\n	'advIOClickFrequency', 'impressionPiggybackPixelIds', 'creativeViewFrequencyOld', 'dataCenterId', 'adSpotId', 'pageType',\n	'numSlots', 'slotPosition', 'debugStatusCode', 'targetedSegmentIds', 'blockedSegmentIds', 'revenue', 'budgetSpent',\n	'conversionInfo', 'impressionTime', 'clickTime', 'userSignals', 'sourceType', 'osId', 'deviceBrand', 'deviceModel',\n	'deviceType', 'browser', 'cost', 'moneySpent', 'attributionRatio') rt as \n	timestamp, isLearning, edgeServerId, sourceComponent, aggregatorId, requestUri, userCookie, userIp, countryId, regionId,\n	cityId, metroId, dma, timeZone, userAgent, publisherId, siteId, foldPosition, refererUrl, uniqueResponseId, uniqueRowId,\n	trackerServerId, dataVersion, totalProcessingTime, intializationTime, requestParsingTime, requestProcessingTime, advertiserId,\n	advertiserIoId, advertiserLiId, creativeId, inventroySourceId, bidStrategyTypeId, pixelId, contentCategoryId, userSegmentId,\n	creativeWidth, creativeHeight, creativeBucketizedHeight, creativeBucketizedWidth, bucketizeAdvertiserLineItemFrequency,\n	trackingType, winningBid, impressions, conversions, clicks, creativeOfferType, statusCode, impressionClickValidationStatusCode,\n	conversionType, advertiserTargetingExpression, userSegments, creativeViewFrequency, creativeClickFrequency, advIOViewFrequency,\n	advIOClickFrequency, impressionPiggybackPixelIds, creativeViewFrequencyOld, dataCenterId, adSpotId, pageType, numSlots,\n	slotPosition, debugStatusCode, targetedSegmentIds, blockedSegmentIds, revenue, budgetSpent, conversionInfo, impressionTime,\n	clickTime, userSignals, sourceType, osId, deviceBrand, deviceModel, deviceType, browser, cost, moneySpent, attributionRatio) tr \nwhere tr.ts_date='$year$-$month$-$day$' and cast(tr.ts_hour as int)=cast(\"$hour$\" as int) and cast(tr.ts_minute as int)=cast(\"$minute$\" as int);\nDROP TABLE loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;",sample:!1,approx_mode:!1,approx_aggregations:!1,loader_table_name:null,loader_stable:null,md_cmd:null,script_location:null,retry:0},dependency_info:{files:[{id:"file1",window_start:"-2",window_end:"-2",path:"s3://komliudslogs/tracker/%Y/%m/%d/%H/%M"}]},incremental:{},time_out:600,command_type:"HiveCommand",macros:[{year:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%Y')"},{month:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%m')"},{day:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%d')"},{hour:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%H')"},{minute:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%M')"}],template:"generic",pool:null,label:"default",is_digest:!1,can_notify:!0,digest_time_hour:0,digest_time_minute:0,email_list:"shailesh.garg@komli.com",bitmap:3},{id:3877,name:"UDS-TrackerDataLoad_July21_25Fix",status:"DONE",concurrency:5,frequency:30,time_unit:"minutes",no_catch_up:!1,cron_expression:"",user_id:507,start_time:"2015-07-21 00:00",end_time:"2015-07-25 23:30",time_zone:"UTC",next_materialized_time:"2015-07-26 00:00",command:{query:"drop table if exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;\ncreate external table if not exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$ (is_rtb int, timestamp int, user_id string, proto string) \nROW FORMAT DELIMITED FIELDS TERMINATED by '\\t' LINES TERMINATED BY '\\n'\nLOCATION 's3n://komliudslogs/tracker/$year$/$month$/$day$/$hour$/$minute$/';\nset hive.optimize.s3.query=true;\nadd jar s3://komliudsdev/jars/logp-common-2.0.jar;\nadd jar s3://komliudsdev/jars/hiveUdfs-1.0.jar;\nCREATE temporary function protoread AS 'com.komli.hive.udfs.TrackerProtoDeserializer';\n\nINSERT OVERWRITE TABLE udsprod.trackerevent PARTITION(ts_date='$year$-$month$-$day$', ts_hour='$hour$', ts_minute='$minute$')\nSELECT tr.timestamp, tr.isLearning, tr.edgeServerId, tr.sourceComponent, tr.aggregatorId,\n        tr.requestUri, tr.userCookie, tr.userIp, tr.countryId, tr.regionId, tr.cityId, tr.metroId, \n        tr.dma, tr.timeZone, tr.userAgent, tr.publisherId, tr.siteId, tr.foldPosition, tr.refererUrl, \n        tr.uniqueResponseId, tr.uniqueRowId, tr.trackerServerId, tr.dataVersion, tr.totalProcessingTime, \n        tr.intializationTime, tr.requestParsingTime, tr.requestProcessingTime, tr.advertiserId, tr.advertiserIoId,\n        tr.advertiserLiId, tr.creativeId, tr.inventroySourceId, tr.bidStrategyTypeId, tr.pixelId,\n        tr.contentCategoryId, tr.userSegmentId, tr.creativeWidth, tr.creativeHeight, tr.creativeBucketizedHeight,\n        tr.creativeBucketizedWidth, tr.bucketizeAdvertiserLineItemFrequency, tr.trackingType, tr.winningBid,\n        tr.impressions, tr.conversions, tr.clicks, tr.creativeOfferType, tr.statusCode,\n        tr.impressionClickValidationStatusCode, tr.conversionType, tr.advertiserTargetingExpression,\n        tr.userSegments, tr.creativeViewFrequency, tr.creativeClickFrequency, tr.advIOViewFrequency, \n        tr.advIOClickFrequency, tr.impressionPiggybackPixelIds, tr.creativeViewFrequencyOld, tr.dataCenterId, \n        tr.adSpotId, tr.pageType, tr.numSlots, tr.slotPosition, tr.debugStatusCode, tr.targetedSegmentIds,\n        tr.blockedSegmentIds, tr.revenue, tr.budgetSpent, tr.conversionInfo, tr.impressionTime, tr.clickTime,\n        tr.userSignals, tr.sourceType, tr.osId, tr.deviceBrand, tr.deviceModel, tr.deviceType, tr.browser,\n        tr.cost, tr.moneySpent, tr.attributionRatio\nFROM (SELECT rt.timestamp, rt.isLearning, rt.edgeServerId, rt.sourceComponent, rt.aggregatorId,\n		rt.requestUri,\n		CASE WHEN (rt.userCookie is null ) THEN null ELSE get_json_object(rt.userCookie, '$.userId') END AS userCookie,\n		rt.userIp, rt.countryId, rt.regionId, rt.cityId, rt.metroId, rt.dma, rt.timeZone,\n		rt.userAgent, rt.publisherId, rt.siteId, rt.foldPosition, rt.refererUrl, rt.uniqueResponseId,\n		rt.uniqueRowId, rt.trackerServerId, rt.dataVersion, rt.totalProcessingTime, rt.intializationTime,\n		rt.requestParsingTime, rt.requestProcessingTime, rt.advertiserId, rt.advertiserIoId,\n		rt.advertiserLiId, rt.creativeId, rt.inventroySourceId, rt.bidStrategyTypeId, rt.pixelId,\n		rt.contentCategoryId, rt.userSegmentId, rt.creativeWidth, rt.creativeHeight, rt.creativeBucketizedHeight,\n		rt.creativeBucketizedWidth, rt.bucketizeAdvertiserLineItemFrequency, rt.trackingType, rt.winningBid,\n		rt.impressions, rt.conversions, rt.clicks, rt.creativeOfferType, rt.statusCode,\n		rt.impressionClickValidationStatusCode, rt.conversionType, rt.advertiserTargetingExpression,\n		CASE WHEN (rt.userSegments is null) THEN null ELSE SPLIT(regexp_replace(get_json_object(concat('{\\\"userSegments\\\":',rt.userSegments,'}'), '$.userSegments.segmentId'), '\\\\[|\\\\]',''),',') END as userSegments,\n		rt.creativeViewFrequency, rt.creativeClickFrequency, rt.advIOViewFrequency, rt.advIOClickFrequency,\n		CASE WHEN (rt.impressionPiggybackPixelIds is null) THEN null ELSE SPLIT(regexp_replace(rt.impressionPiggybackPixelIds, '\\\\[|\\\\]',''),',') END AS impressionPiggybackPixelIds,\n		rt.creativeViewFrequencyOld, rt.dataCenterId, rt.adSpotId,\n		rt.pageType, rt.numSlots, rt.slotPosition, rt.debugStatusCode,\n		CASE WHEN (rt.targetedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.targetedSegmentIds, '\\\\[|\\\\]',''),',') END AS targetedSegmentIds,\n		CASE WHEN (rt.blockedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.blockedSegmentIds, '\\\\[|\\\\]',''),',') END AS blockedSegmentIds,\n		rt.revenue, rt.budgetSpent,\n		CASE WHEN (rt.conversionInfo is null) THEN null ELSE str_to_map(regexp_replace(rt.conversionInfo, '\\\"|\\\\{|\\\\}', ''),'\\,',':') END AS conversionInfo,\n		rt.impressionTime, rt.clickTime,\n		CASE WHEN (rt.userSignals is null) THEN null ELSE str_to_map(regexp_replace(rt.userSignals, '\\\"|\\\\{|\\\\}', ''), '\\,',':') END AS userSignals,\n		rt.sourceType, rt.osId, rt.deviceBrand, rt.deviceModel, rt.deviceType, rt.browser,\n		rt.cost, rt.moneySpent, rt.attributionRatio,\n		to_date(from_unixtime(cast(rt.timestamp as int))) as ts_date,\n	        hour(from_unixtime(cast(rt.timestamp as int))) as ts_hour,\n	        CASE WHEN( cast(minute(from_unixtime(cast(rt.timestamp as int))) as int)/30<1) THEN '0' ELSE '30' END as ts_minute\n	FROM loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$\n	LATERAL VIEW json_tuple(protoread(proto), 'timestamp', 'isLearning', 'edgeServerId', 'sourceComponent', 'aggregatorId',\n	'requestUri', 'userId', 'userIp', 'countryId', 'regionId', 'cityId', 'metroId', 'dma', 'timeZone', 'userAgent',\n	'publisherId', 'siteId', 'foldPosition', 'refererUrl', 'uniqueResponseId', 'uniqueRowId', 'trackerServerId',\n	'dataVersion', 'totalProcessingTime', 'intializationTime', 'requestParsingTime', 'requestProcessingTime',\n	'advertiserId', 'advertiserIoId', 'advertiserLiId', 'creativeId', 'inventroySourceId', 'bidStrategyTypeId',\n	'pixelId', 'contentCategoryId', 'userSegmentId', 'creativeWidth', 'creativeHeight', 'creativeBucketizedHeight',\n	'creativeBucketizedWidth', 'bucketizeAdvertiserLineItemFrequency', 'trackingType', 'winningBid', 'impressions',\n	'conversions', 'clicks', 'creativeOfferType', 'statusCode', 'impressionClickValidationStatusCode', 'conversionType',\n	'advertiserTargetingExpression', 'userSegments', 'creativeViewFrequency', 'creativeClickFrequency', 'advIOViewFrequency',\n	'advIOClickFrequency', 'impressionPiggybackPixelIds', 'creativeViewFrequencyOld', 'dataCenterId', 'adSpotId', 'pageType',\n	'numSlots', 'slotPosition', 'debugStatusCode', 'targetedSegmentIds', 'blockedSegmentIds', 'revenue', 'budgetSpent',\n	'conversionInfo', 'impressionTime', 'clickTime', 'userSignals', 'sourceType', 'osId', 'deviceBrand', 'deviceModel',\n	'deviceType', 'browser', 'cost', 'moneySpent', 'attributionRatio') rt as \n	timestamp, isLearning, edgeServerId, sourceComponent, aggregatorId, requestUri, userCookie, userIp, countryId, regionId,\n	cityId, metroId, dma, timeZone, userAgent, publisherId, siteId, foldPosition, refererUrl, uniqueResponseId, uniqueRowId,\n	trackerServerId, dataVersion, totalProcessingTime, intializationTime, requestParsingTime, requestProcessingTime, advertiserId,\n	advertiserIoId, advertiserLiId, creativeId, inventroySourceId, bidStrategyTypeId, pixelId, contentCategoryId, userSegmentId,\n	creativeWidth, creativeHeight, creativeBucketizedHeight, creativeBucketizedWidth, bucketizeAdvertiserLineItemFrequency,\n	trackingType, winningBid, impressions, conversions, clicks, creativeOfferType, statusCode, impressionClickValidationStatusCode,\n	conversionType, advertiserTargetingExpression, userSegments, creativeViewFrequency, creativeClickFrequency, advIOViewFrequency,\n	advIOClickFrequency, impressionPiggybackPixelIds, creativeViewFrequencyOld, dataCenterId, adSpotId, pageType, numSlots,\n	slotPosition, debugStatusCode, targetedSegmentIds, blockedSegmentIds, revenue, budgetSpent, conversionInfo, impressionTime,\n	clickTime, userSignals, sourceType, osId, deviceBrand, deviceModel, deviceType, browser, cost, moneySpent, attributionRatio) tr \nwhere tr.ts_date='$year$-$month$-$day$' and cast(tr.ts_hour as int)=cast(\"$hour$\" as int) and cast(tr.ts_minute as int)=cast(\"$minute$\" as int);\nDROP TABLE loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;",sample:!1,approx_mode:!1,approx_aggregations:!1,loader_table_name:null,loader_stable:null,md_cmd:null,script_location:null,retry:0},dependency_info:{files:[{window_start:"-2",window_end:"-2",id:"file1",path:"s3://komliudslogs/tracker/%Y/%m/%d/%H/%M"}]},incremental:{},time_out:600,command_type:"HiveCommand",macros:[{year:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%Y')"},{month:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%m')"},{day:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%d')"},{hour:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%H')"},{minute:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%M')"}],template:"generic",pool:null,label:"default",is_digest:!1,can_notify:!0,digest_time_hour:0,digest_time_minute:0,email_list:"shailesh.garg@komli.com",bitmap:3},{id:3878,name:"UDS-TrackerDataLoad_July26_31Fix",status:"DONE",concurrency:5,frequency:30,time_unit:"minutes",no_catch_up:!1,cron_expression:"",user_id:507,start_time:"2015-07-26 00:00",end_time:"2015-07-31 23:30",time_zone:"UTC",next_materialized_time:"2015-08-01 00:00",command:{query:"drop table if exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;\ncreate external table if not exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$ (is_rtb int, timestamp int, user_id string, proto string) \nROW FORMAT DELIMITED FIELDS TERMINATED by '\\t' LINES TERMINATED BY '\\n'\nLOCATION 's3n://komliudslogs/tracker/$year$/$month$/$day$/$hour$/$minute$/';\nset hive.optimize.s3.query=true;\nadd jar s3://komliudsdev/jars/logp-common-2.0.jar;\nadd jar s3://komliudsdev/jars/hiveUdfs-1.0.jar;\nCREATE temporary function protoread AS 'com.komli.hive.udfs.TrackerProtoDeserializer';\n\nINSERT OVERWRITE TABLE udsprod.trackerevent PARTITION(ts_date='$year$-$month$-$day$', ts_hour='$hour$', ts_minute='$minute$')\nSELECT tr.timestamp, tr.isLearning, tr.edgeServerId, tr.sourceComponent, tr.aggregatorId,\n        tr.requestUri, tr.userCookie, tr.userIp, tr.countryId, tr.regionId, tr.cityId, tr.metroId, \n        tr.dma, tr.timeZone, tr.userAgent, tr.publisherId, tr.siteId, tr.foldPosition, tr.refererUrl, \n        tr.uniqueResponseId, tr.uniqueRowId, tr.trackerServerId, tr.dataVersion, tr.totalProcessingTime, \n        tr.intializationTime, tr.requestParsingTime, tr.requestProcessingTime, tr.advertiserId, tr.advertiserIoId,\n        tr.advertiserLiId, tr.creativeId, tr.inventroySourceId, tr.bidStrategyTypeId, tr.pixelId,\n        tr.contentCategoryId, tr.userSegmentId, tr.creativeWidth, tr.creativeHeight, tr.creativeBucketizedHeight,\n        tr.creativeBucketizedWidth, tr.bucketizeAdvertiserLineItemFrequency, tr.trackingType, tr.winningBid,\n        tr.impressions, tr.conversions, tr.clicks, tr.creativeOfferType, tr.statusCode,\n        tr.impressionClickValidationStatusCode, tr.conversionType, tr.advertiserTargetingExpression,\n        tr.userSegments, tr.creativeViewFrequency, tr.creativeClickFrequency, tr.advIOViewFrequency, \n        tr.advIOClickFrequency, tr.impressionPiggybackPixelIds, tr.creativeViewFrequencyOld, tr.dataCenterId, \n        tr.adSpotId, tr.pageType, tr.numSlots, tr.slotPosition, tr.debugStatusCode, tr.targetedSegmentIds,\n        tr.blockedSegmentIds, tr.revenue, tr.budgetSpent, tr.conversionInfo, tr.impressionTime, tr.clickTime,\n        tr.userSignals, tr.sourceType, tr.osId, tr.deviceBrand, tr.deviceModel, tr.deviceType, tr.browser,\n        tr.cost, tr.moneySpent, tr.attributionRatio\nFROM (SELECT rt.timestamp, rt.isLearning, rt.edgeServerId, rt.sourceComponent, rt.aggregatorId,\n		rt.requestUri,\n		CASE WHEN (rt.userCookie is null ) THEN null ELSE get_json_object(rt.userCookie, '$.userId') END AS userCookie,\n		rt.userIp, rt.countryId, rt.regionId, rt.cityId, rt.metroId, rt.dma, rt.timeZone,\n		rt.userAgent, rt.publisherId, rt.siteId, rt.foldPosition, rt.refererUrl, rt.uniqueResponseId,\n		rt.uniqueRowId, rt.trackerServerId, rt.dataVersion, rt.totalProcessingTime, rt.intializationTime,\n		rt.requestParsingTime, rt.requestProcessingTime, rt.advertiserId, rt.advertiserIoId,\n		rt.advertiserLiId, rt.creativeId, rt.inventroySourceId, rt.bidStrategyTypeId, rt.pixelId,\n		rt.contentCategoryId, rt.userSegmentId, rt.creativeWidth, rt.creativeHeight, rt.creativeBucketizedHeight,\n		rt.creativeBucketizedWidth, rt.bucketizeAdvertiserLineItemFrequency, rt.trackingType, rt.winningBid,\n		rt.impressions, rt.conversions, rt.clicks, rt.creativeOfferType, rt.statusCode,\n		rt.impressionClickValidationStatusCode, rt.conversionType, rt.advertiserTargetingExpression,\n		CASE WHEN (rt.userSegments is null) THEN null ELSE SPLIT(regexp_replace(get_json_object(concat('{\\\"userSegments\\\":',rt.userSegments,'}'), '$.userSegments.segmentId'), '\\\\[|\\\\]',''),',') END as userSegments,\n		rt.creativeViewFrequency, rt.creativeClickFrequency, rt.advIOViewFrequency, rt.advIOClickFrequency,\n		CASE WHEN (rt.impressionPiggybackPixelIds is null) THEN null ELSE SPLIT(regexp_replace(rt.impressionPiggybackPixelIds, '\\\\[|\\\\]',''),',') END AS impressionPiggybackPixelIds,\n		rt.creativeViewFrequencyOld, rt.dataCenterId, rt.adSpotId,\n		rt.pageType, rt.numSlots, rt.slotPosition, rt.debugStatusCode,\n		CASE WHEN (rt.targetedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.targetedSegmentIds, '\\\\[|\\\\]',''),',') END AS targetedSegmentIds,\n		CASE WHEN (rt.blockedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.blockedSegmentIds, '\\\\[|\\\\]',''),',') END AS blockedSegmentIds,\n		rt.revenue, rt.budgetSpent,\n		CASE WHEN (rt.conversionInfo is null) THEN null ELSE str_to_map(regexp_replace(rt.conversionInfo, '\\\"|\\\\{|\\\\}', ''),'\\,',':') END AS conversionInfo,\n		rt.impressionTime, rt.clickTime,\n		CASE WHEN (rt.userSignals is null) THEN null ELSE str_to_map(regexp_replace(rt.userSignals, '\\\"|\\\\{|\\\\}', ''), '\\,',':') END AS userSignals,\n		rt.sourceType, rt.osId, rt.deviceBrand, rt.deviceModel, rt.deviceType, rt.browser,\n		rt.cost, rt.moneySpent, rt.attributionRatio,\n		to_date(from_unixtime(cast(rt.timestamp as int))) as ts_date,\n	        hour(from_unixtime(cast(rt.timestamp as int))) as ts_hour,\n	        CASE WHEN( cast(minute(from_unixtime(cast(rt.timestamp as int))) as int)/30<1) THEN '0' ELSE '30' END as ts_minute\n	FROM loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$\n	LATERAL VIEW json_tuple(protoread(proto), 'timestamp', 'isLearning', 'edgeServerId', 'sourceComponent', 'aggregatorId',\n	'requestUri', 'userId', 'userIp', 'countryId', 'regionId', 'cityId', 'metroId', 'dma', 'timeZone', 'userAgent',\n	'publisherId', 'siteId', 'foldPosition', 'refererUrl', 'uniqueResponseId', 'uniqueRowId', 'trackerServerId',\n	'dataVersion', 'totalProcessingTime', 'intializationTime', 'requestParsingTime', 'requestProcessingTime',\n	'advertiserId', 'advertiserIoId', 'advertiserLiId', 'creativeId', 'inventroySourceId', 'bidStrategyTypeId',\n	'pixelId', 'contentCategoryId', 'userSegmentId', 'creativeWidth', 'creativeHeight', 'creativeBucketizedHeight',\n	'creativeBucketizedWidth', 'bucketizeAdvertiserLineItemFrequency', 'trackingType', 'winningBid', 'impressions',\n	'conversions', 'clicks', 'creativeOfferType', 'statusCode', 'impressionClickValidationStatusCode', 'conversionType',\n	'advertiserTargetingExpression', 'userSegments', 'creativeViewFrequency', 'creativeClickFrequency', 'advIOViewFrequency',\n	'advIOClickFrequency', 'impressionPiggybackPixelIds', 'creativeViewFrequencyOld', 'dataCenterId', 'adSpotId', 'pageType',\n	'numSlots', 'slotPosition', 'debugStatusCode', 'targetedSegmentIds', 'blockedSegmentIds', 'revenue', 'budgetSpent',\n	'conversionInfo', 'impressionTime', 'clickTime', 'userSignals', 'sourceType', 'osId', 'deviceBrand', 'deviceModel',\n	'deviceType', 'browser', 'cost', 'moneySpent', 'attributionRatio') rt as \n	timestamp, isLearning, edgeServerId, sourceComponent, aggregatorId, requestUri, userCookie, userIp, countryId, regionId,\n	cityId, metroId, dma, timeZone, userAgent, publisherId, siteId, foldPosition, refererUrl, uniqueResponseId, uniqueRowId,\n	trackerServerId, dataVersion, totalProcessingTime, intializationTime, requestParsingTime, requestProcessingTime, advertiserId,\n	advertiserIoId, advertiserLiId, creativeId, inventroySourceId, bidStrategyTypeId, pixelId, contentCategoryId, userSegmentId,\n	creativeWidth, creativeHeight, creativeBucketizedHeight, creativeBucketizedWidth, bucketizeAdvertiserLineItemFrequency,\n	trackingType, winningBid, impressions, conversions, clicks, creativeOfferType, statusCode, impressionClickValidationStatusCode,\n	conversionType, advertiserTargetingExpression, userSegments, creativeViewFrequency, creativeClickFrequency, advIOViewFrequency,\n	advIOClickFrequency, impressionPiggybackPixelIds, creativeViewFrequencyOld, dataCenterId, adSpotId, pageType, numSlots,\n	slotPosition, debugStatusCode, targetedSegmentIds, blockedSegmentIds, revenue, budgetSpent, conversionInfo, impressionTime,\n	clickTime, userSignals, sourceType, osId, deviceBrand, deviceModel, deviceType, browser, cost, moneySpent, attributionRatio) tr \nwhere tr.ts_date='$year$-$month$-$day$' and cast(tr.ts_hour as int)=cast(\"$hour$\" as int) and cast(tr.ts_minute as int)=cast(\"$minute$\" as int);\nDROP TABLE loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;",
sample:!1,approx_mode:!1,approx_aggregations:!1,loader_table_name:null,loader_stable:null,md_cmd:null,script_location:null,retry:0},dependency_info:{files:[{window_start:"-2",path:"s3://komliudslogs/tracker/%Y/%m/%d/%H/%M",id:"file1",window_end:"-2"}]},incremental:{},time_out:600,command_type:"HiveCommand",macros:[{year:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%Y')"},{month:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%m')"},{day:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%d')"},{hour:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%H')"},{minute:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%M')"}],template:"generic",pool:null,label:"default",is_digest:!1,can_notify:!0,digest_time_hour:0,digest_time_minute:0,email_list:"shailesh.garg@komli.com",bitmap:3},{id:3879,name:"UDS-TrackerDataLoad_Aug1Fix",status:"DONE",concurrency:5,frequency:30,time_unit:"minutes",no_catch_up:!1,cron_expression:"",user_id:507,start_time:"2015-08-01 05:00",end_time:"2015-08-01 23:30",time_zone:"UTC",next_materialized_time:"2015-08-02 00:00",command:{query:"drop table if exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;\ncreate external table if not exists loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$ (is_rtb int, timestamp int, user_id string, proto string) \nROW FORMAT DELIMITED FIELDS TERMINATED by '\\t' LINES TERMINATED BY '\\n'\nLOCATION 's3n://komliudslogs/tracker/$year$/$month$/$day$/$hour$/$minute$/';\nset hive.optimize.s3.query=true;\nadd jar s3://komliudsdev/jars/logp-common-2.0.jar;\nadd jar s3://komliudsdev/jars/hiveUdfs-1.0.jar;\nCREATE temporary function protoread AS 'com.komli.hive.udfs.TrackerProtoDeserializer';\n\nINSERT OVERWRITE TABLE udsprod.trackerevent PARTITION(ts_date='$year$-$month$-$day$', ts_hour='$hour$', ts_minute='$minute$')\nSELECT tr.timestamp, tr.isLearning, tr.edgeServerId, tr.sourceComponent, tr.aggregatorId,\n        tr.requestUri, tr.userCookie, tr.userIp, tr.countryId, tr.regionId, tr.cityId, tr.metroId, \n        tr.dma, tr.timeZone, tr.userAgent, tr.publisherId, tr.siteId, tr.foldPosition, tr.refererUrl, \n        tr.uniqueResponseId, tr.uniqueRowId, tr.trackerServerId, tr.dataVersion, tr.totalProcessingTime, \n        tr.intializationTime, tr.requestParsingTime, tr.requestProcessingTime, tr.advertiserId, tr.advertiserIoId,\n        tr.advertiserLiId, tr.creativeId, tr.inventroySourceId, tr.bidStrategyTypeId, tr.pixelId,\n        tr.contentCategoryId, tr.userSegmentId, tr.creativeWidth, tr.creativeHeight, tr.creativeBucketizedHeight,\n        tr.creativeBucketizedWidth, tr.bucketizeAdvertiserLineItemFrequency, tr.trackingType, tr.winningBid,\n        tr.impressions, tr.conversions, tr.clicks, tr.creativeOfferType, tr.statusCode,\n        tr.impressionClickValidationStatusCode, tr.conversionType, tr.advertiserTargetingExpression,\n        tr.userSegments, tr.creativeViewFrequency, tr.creativeClickFrequency, tr.advIOViewFrequency, \n        tr.advIOClickFrequency, tr.impressionPiggybackPixelIds, tr.creativeViewFrequencyOld, tr.dataCenterId, \n        tr.adSpotId, tr.pageType, tr.numSlots, tr.slotPosition, tr.debugStatusCode, tr.targetedSegmentIds,\n        tr.blockedSegmentIds, tr.revenue, tr.budgetSpent, tr.conversionInfo, tr.impressionTime, tr.clickTime,\n        tr.userSignals, tr.sourceType, tr.osId, tr.deviceBrand, tr.deviceModel, tr.deviceType, tr.browser,\n        tr.cost, tr.moneySpent, tr.attributionRatio\nFROM (SELECT rt.timestamp, rt.isLearning, rt.edgeServerId, rt.sourceComponent, rt.aggregatorId,\n		rt.requestUri,\n		CASE WHEN (rt.userCookie is null ) THEN null ELSE get_json_object(rt.userCookie, '$.userId') END AS userCookie,\n		rt.userIp, rt.countryId, rt.regionId, rt.cityId, rt.metroId, rt.dma, rt.timeZone,\n		rt.userAgent, rt.publisherId, rt.siteId, rt.foldPosition, rt.refererUrl, rt.uniqueResponseId,\n		rt.uniqueRowId, rt.trackerServerId, rt.dataVersion, rt.totalProcessingTime, rt.intializationTime,\n		rt.requestParsingTime, rt.requestProcessingTime, rt.advertiserId, rt.advertiserIoId,\n		rt.advertiserLiId, rt.creativeId, rt.inventroySourceId, rt.bidStrategyTypeId, rt.pixelId,\n		rt.contentCategoryId, rt.userSegmentId, rt.creativeWidth, rt.creativeHeight, rt.creativeBucketizedHeight,\n		rt.creativeBucketizedWidth, rt.bucketizeAdvertiserLineItemFrequency, rt.trackingType, rt.winningBid,\n		rt.impressions, rt.conversions, rt.clicks, rt.creativeOfferType, rt.statusCode,\n		rt.impressionClickValidationStatusCode, rt.conversionType, rt.advertiserTargetingExpression,\n		CASE WHEN (rt.userSegments is null) THEN null ELSE SPLIT(regexp_replace(get_json_object(concat('{\\\"userSegments\\\":',rt.userSegments,'}'), '$.userSegments.segmentId'), '\\\\[|\\\\]',''),',') END as userSegments,\n		rt.creativeViewFrequency, rt.creativeClickFrequency, rt.advIOViewFrequency, rt.advIOClickFrequency,\n		CASE WHEN (rt.impressionPiggybackPixelIds is null) THEN null ELSE SPLIT(regexp_replace(rt.impressionPiggybackPixelIds, '\\\\[|\\\\]',''),',') END AS impressionPiggybackPixelIds,\n		rt.creativeViewFrequencyOld, rt.dataCenterId, rt.adSpotId,\n		rt.pageType, rt.numSlots, rt.slotPosition, rt.debugStatusCode,\n		CASE WHEN (rt.targetedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.targetedSegmentIds, '\\\\[|\\\\]',''),',') END AS targetedSegmentIds,\n		CASE WHEN (rt.blockedSegmentIds is null) THEN null ELSE SPLIT(regexp_replace(rt.blockedSegmentIds, '\\\\[|\\\\]',''),',') END AS blockedSegmentIds,\n		rt.revenue, rt.budgetSpent,\n		CASE WHEN (rt.conversionInfo is null) THEN null ELSE str_to_map(regexp_replace(rt.conversionInfo, '\\\"|\\\\{|\\\\}', ''),'\\,',':') END AS conversionInfo,\n		rt.impressionTime, rt.clickTime,\n		CASE WHEN (rt.userSignals is null) THEN null ELSE str_to_map(regexp_replace(rt.userSignals, '\\\"|\\\\{|\\\\}', ''), '\\,',':') END AS userSignals,\n		rt.sourceType, rt.osId, rt.deviceBrand, rt.deviceModel, rt.deviceType, rt.browser,\n		rt.cost, rt.moneySpent, rt.attributionRatio,\n		to_date(from_unixtime(cast(rt.timestamp as int))) as ts_date,\n	        hour(from_unixtime(cast(rt.timestamp as int))) as ts_hour,\n	        CASE WHEN( cast(minute(from_unixtime(cast(rt.timestamp as int))) as int)/30<1) THEN '0' ELSE '30' END as ts_minute\n	FROM loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$\n	LATERAL VIEW json_tuple(protoread(proto), 'timestamp', 'isLearning', 'edgeServerId', 'sourceComponent', 'aggregatorId',\n	'requestUri', 'userId', 'userIp', 'countryId', 'regionId', 'cityId', 'metroId', 'dma', 'timeZone', 'userAgent',\n	'publisherId', 'siteId', 'foldPosition', 'refererUrl', 'uniqueResponseId', 'uniqueRowId', 'trackerServerId',\n	'dataVersion', 'totalProcessingTime', 'intializationTime', 'requestParsingTime', 'requestProcessingTime',\n	'advertiserId', 'advertiserIoId', 'advertiserLiId', 'creativeId', 'inventroySourceId', 'bidStrategyTypeId',\n	'pixelId', 'contentCategoryId', 'userSegmentId', 'creativeWidth', 'creativeHeight', 'creativeBucketizedHeight',\n	'creativeBucketizedWidth', 'bucketizeAdvertiserLineItemFrequency', 'trackingType', 'winningBid', 'impressions',\n	'conversions', 'clicks', 'creativeOfferType', 'statusCode', 'impressionClickValidationStatusCode', 'conversionType',\n	'advertiserTargetingExpression', 'userSegments', 'creativeViewFrequency', 'creativeClickFrequency', 'advIOViewFrequency',\n	'advIOClickFrequency', 'impressionPiggybackPixelIds', 'creativeViewFrequencyOld', 'dataCenterId', 'adSpotId', 'pageType',\n	'numSlots', 'slotPosition', 'debugStatusCode', 'targetedSegmentIds', 'blockedSegmentIds', 'revenue', 'budgetSpent',\n	'conversionInfo', 'impressionTime', 'clickTime', 'userSignals', 'sourceType', 'osId', 'deviceBrand', 'deviceModel',\n	'deviceType', 'browser', 'cost', 'moneySpent', 'attributionRatio') rt as \n	timestamp, isLearning, edgeServerId, sourceComponent, aggregatorId, requestUri, userCookie, userIp, countryId, regionId,\n	cityId, metroId, dma, timeZone, userAgent, publisherId, siteId, foldPosition, refererUrl, uniqueResponseId, uniqueRowId,\n	trackerServerId, dataVersion, totalProcessingTime, intializationTime, requestParsingTime, requestProcessingTime, advertiserId,\n	advertiserIoId, advertiserLiId, creativeId, inventroySourceId, bidStrategyTypeId, pixelId, contentCategoryId, userSegmentId,\n	creativeWidth, creativeHeight, creativeBucketizedHeight, creativeBucketizedWidth, bucketizeAdvertiserLineItemFrequency,\n	trackingType, winningBid, impressions, conversions, clicks, creativeOfferType, statusCode, impressionClickValidationStatusCode,\n	conversionType, advertiserTargetingExpression, userSegments, creativeViewFrequency, creativeClickFrequency, advIOViewFrequency,\n	advIOClickFrequency, impressionPiggybackPixelIds, creativeViewFrequencyOld, dataCenterId, adSpotId, pageType, numSlots,\n	slotPosition, debugStatusCode, targetedSegmentIds, blockedSegmentIds, revenue, budgetSpent, conversionInfo, impressionTime,\n	clickTime, userSignals, sourceType, osId, deviceBrand, deviceModel, deviceType, browser, cost, moneySpent, attributionRatio) tr \nwhere tr.ts_date='$year$-$month$-$day$' and cast(tr.ts_hour as int)=cast(\"$hour$\" as int) and cast(tr.ts_minute as int)=cast(\"$minute$\" as int);\nDROP TABLE loaddb.tracker_$year$_$month$_$day$_$hour$_$minute$;",sample:!1,approx_mode:!1,approx_aggregations:!1,loader_table_name:null,loader_stable:null,md_cmd:null,script_location:null,retry:0},dependency_info:{files:[{path:"s3://komliudslogs/tracker/%Y/%m/%d/%H/%M",id:"file1",window_end:"-2",window_start:"-2"}]},incremental:{},time_out:600,command_type:"HiveCommand",macros:[{year:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%Y')"},{month:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%m')"},{day:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%d')"},{hour:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%H')"},{minute:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%M')"}],template:"generic",pool:null,label:"default",is_digest:!1,can_notify:!0,digest_time_hour:0,digest_time_minute:0,email_list:"shailesh.garg@komli.com",bitmap:3},{id:3898,name:"UDS-ProcessorDataLoad_11th_JulyFix",status:"KILLED",concurrency:5,frequency:30,time_unit:"minutes",no_catch_up:!1,cron_expression:"",user_id:507,start_time:"2015-07-11 12:00",end_time:"2018-07-11 23:30",time_zone:"UTC",next_materialized_time:"2015-07-12 08:30",command:{query:"drop table if exists loaddb.processor_$year$_$month$_$day$_$hour$_$minute$;\ncreate external table if not exists loaddb.processor_$year$_$month$_$day$_$hour$_$minute$ (timestamp int, user_id string, proto string) \nROW FORMAT DELIMITED FIELDS TERMINATED by '\\t' LINES TERMINATED BY '\\n'\nLOCATION 's3n://komliudslogs/processor/$year$/$month$/$day$/$hour$/$minute$/';\nset hive.optimize.s3.query=true;\nadd jar s3://komliudsdev/jars/logp-common-2.0.jar;\nadd jar s3://komliudsdev/jars/hiveUdfs-1.0.jar;\nCREATE temporary function procprotoread AS 'com.komli.hive.udfs.ProcessorProtoDeserializer';\n\nINSERT OVERWRITE TABLE udsprod.processorevent PARTITION(ts_date='$year$-$month$-$day$', ts_hour='$hour$', ts_minute='$minute$')\nSELECT pe.timestamp, pe.responseId, pe.adSlotId, pe.aggregatorId, pe.isTest, pe.isLearning,\n	pe.mediaType, pe.userCookie, pe.remoteIp, pe.country, pe.region, pe.city, pe.area, \n	pe.dma, pe.timezoneOffset, pe.os, pe.browser, pe.pubId, pe.siteId, pe.requestingPage, \n	pe.foldPosition, pe.uniqueResponseId, pe.bidCurrency, pe.numberOfBids, pe.adserverId, \n	pe.dataVersion, pe.totalTime, pe.bidInitializationTime, pe.datastoreProcessTime, \n	pe.getCandidatesTime, pe.adFilteringTime, pe.ecpmComputationTime, pe.bidComputationTime, \n	pe.adSelectionTime, pe.bidSubmitTime, pe.learningPercent, pe.pageCategories, pe.userSegments, \n	pe.bids, pe.brandSafetyCategories, pe.pageLanguageId, pe.sspUserId, pe.minEcpm, pe.adSpotId, \n	pe.creativeSizes, pe.pageTypeId, pe.numSlots, pe.eligibleLIs, pe.bidType, pe.isSecureRequest, \n	pe.sourceType\nFROM (SELECT p.timestamp, p.responseId, p.adSlotId, p.aggregatorId, p.isTest, p.isLearning,\n		p.mediaType, p.userCookie, p.remoteIp, p.country, p.region, p.city, p.area, \n		p.dma, p.timezoneOffset, p.os, p.browser, p.pubId, p.siteId, p.requestingPage, \n		p.foldPosition, p.uniqueResponseId, p.bidCurrency, p.numberOfBids, p.adserverId, \n		p.dataVersion, p.totalTime, p.bidInitializationTime, p.datastoreProcessTime, \n		p.getCandidatesTime, p.adFilteringTime, p.ecpmComputationTime, p.bidComputationTime, \n		p.adSelectionTime, p.bidSubmitTime, p.learningPercent, \n		CASE WHEN (p.pageCategories is null) THEN null ELSE str_to_map(regexp_replace(p.pageCategories, '\\\\[|\\\\]|\\\\{|\\\\}|\\\\\"categoryId\\\\\":|\\\\,\\\\\"weight\\\\\"',''), '\\\\,', ':') END as pageCategories,\n		CASE WHEN (p.userSegments is null) THEN null ELSE SPLIT(regexp_replace(p.userSegments, '\\\\[|\\\\]',''), '\\\\,') END as userSegments, \n		p.bids, \n		CASE WHEN (p.brandSafetyCategories is null) THEN null ELSE SPLIT(regexp_replace(p.brandSafetyCategories, '\\\\[|\\\\]', ''), '\\\\,') END as brandSafetyCategories, \n		p.pageLanguageId, p.sspUserId, p.minEcpm, p.adSpotId, \n		p.creativeSizes, p.pageTypeId, p.numSlots, p.eligibleLIs, p.bidType, p.isSecureRequest, \n		p.sourceType,\n		to_date(from_unixtime(cast(p.timestamp as int))) as ts_date,\n                hour(from_unixtime(cast(p.timestamp as int))) as ts_hour,\n                CASE WHEN( cast(minute(from_unixtime(cast(p.timestamp as int))) as int)/30<1) THEN '0' ELSE '30' END as ts_minute\n	FROM loaddb.processor_$year$_$month$_$day$_$hour$_$minute$\n	LATERAL VIEW json_tuple(procprotoread(proto), 'timestamp', 'responseId', 'adSlotId', \n	'aggregatorId', 'isTest', 'isLearning', 'mediaType', 'userCookie', 'remoteIp', 'country', \n	'region', 'city', 'area', 'dma', 'timezoneOffset', 'os', 'browser', 'pubId', 'siteId', \n	'requestingPage', 'foldPosition', 'uniqueResponseId', 'bidCurrency', 'numberOfBids', \n	'adserverId', 'dataVersion', 'totalTime', 'bidInitializationTime', 'datastoreProcessTime',\n	'getCandidatesTime', 'adFilteringTime', 'ecpmComputationTime', 'bidComputationTime',\n	'adSelectionTime', 'bidSubmitTime', 'learningPercent', 'pageCategories', 'userSegments',\n	'bids', 'brandSafetyCategories', 'pageLanguageId', 'sspUserId', 'minEcpm', 'adSpotId',\n	'creativeSizes', 'pageTypeId', 'numSlots', 'eligibleLIs', 'bidType', 'isSecureRequest',\n	'sourceType') p as timestamp, responseId, adSlotId, aggregatorId, isTest, isLearning, \n	mediaType, userCookie, remoteIp, country, region, city, area, dma, timezoneOffset, os, \n	browser, pubId, siteId, requestingPage, foldPosition, uniqueResponseId, bidCurrency, \n	numberOfBids, adserverId, dataVersion, totalTime, bidInitializationTime, \n	datastoreProcessTime, getCandidatesTime, adFilteringTime, ecpmComputationTime, \n	bidComputationTime, adSelectionTime, bidSubmitTime, learningPercent, pageCategories, \n	userSegments, bids, brandSafetyCategories, pageLanguageId, sspUserId, minEcpm, adSpotId,\n	creativeSizes, pageTypeId, numSlots, eligibleLIs, bidType, isSecureRequest, sourceType) pe\nwhere pe.ts_date='$year$-$month$-$day$' and cast(pe.ts_hour as int)=cast('$hour$' as int) and cast(pe.ts_minute as int)=cast('$minute$' as int);\n\ndrop table loaddb.processor_$year$_$month$_$day$_$hour$_$minute$;",sample:!1,approx_mode:!1,approx_aggregations:!1,loader_table_name:null,loader_stable:null,md_cmd:null,script_location:null,retry:0},dependency_info:{files:[{id:"file1",path:"s3://komliudslogs/processor/%Y/%m/%d/%H/%M",window_end:"-2",window_start:"-2"}]},incremental:{},time_out:600,command_type:"HiveCommand",macros:[{year:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%Y')"},{month:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%m')"},{day:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%d')"},{hour:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%H')"},{minute:"Qubole_nominal_time.clone().subtract('minutes', 60).strftime('%M')"}],template:"generic",pool:null,label:"default",is_digest:!1,can_notify:!0,digest_time_hour:0,digest_time_minute:0,email_list:"dataengg@komli.com",bitmap:3}]},AUTH_TOKEN="j4Bd6dqNumcFjsfx283tCor86gZRv1hxAsnq9QcPb3TLDHmFS2EFxWGunze3AjzL";angular.module("revxApp").factory("loadSchedules",["$resource",function(a){return a("http://crossorigin.me/https://api.qubole.com/api/v1.2/scheduler/",{},{query:{method:"GET",headers:{"X-AUTH-TOKEN":AUTH_TOKEN}}})}]),angular.module("revxApp").run(["$templateCache",function(a){a.put("views/about.html","<p>This is the about view.</p>"),a.put("views/cell_template.html",'<div class="ngCellText" ng-class="col.colIndex()"> <!-- UI-Grid uses isolate scope, so there is no access to your application scope variables from a row or cell template. By default, the parent scope of the ui-grid element is assigned to a property on $scope.grid named appScope. --> <button class="btn btn-link" ng-click="grid.appScope.show_job(grid.renderContainers.body.visibleRowCache.indexOf(row))"> {{COL_FIELD}} </button> </div>'),a.put("views/main.html",'<div class="jumbotron"> <h1>\'Allo, \'Allo!</h1> <p class="lead"> <img src="images/devil.1cacbde5.png" alt="I\'m DewGeek"><br> <br> A little Description of what\'s here. If you accidentally fumbled in here, there isn\'t much useful for you. </p> </div> <pre>\n  I have made this Angular app with a little help from Yoeman. \n  I have used Grunt instead of Gulp for running tasks, because I have used grunt beforehand. \n  It will watchover the file changes and reload the server during development.\n  Grunt runs converts all my sass files into CSS files using Compass. \n  All the dependencies are managed by Bower. It will add components into my Index.html file automatically.\n  UI-Grid angular dependency is used for the tables. I included UI.Bootstrap, just in case.\n\n  Check out code on Github: https://github.com/dewgeek/revx_demo\n</pre> <div class="row"> <div class="col-sm-12"> <h4>Scheduled Jobs</h4> <div ui-grid="sorted_jobs_grid"></div> </div> <!-- DONT REPLACE WITH NG-SHOW, IT WON\'T POPULATE TABLE --> <div class="col-sm-12" ng-if="show_labeled_jobs"> <h4> Jobs with Status: {{current_job_label}} <span class="pointer glyphicon glyphicon-remove pull-right" ng-click="close_labeled_jobs()"> </span></h4> <div ui-grid="labeled_jobs_grid"></div> </div> <div class="col-sm-12" ng-if="show_job_flag"> <h5>Log<span class="pointer glyphicon glyphicon-remove pull-right" ng-click="close_job()"></span></h5> <pre>\n        {{ current_job | json }}\n      </pre> </div> </div>'),a.put("views/row_template.html",'<div ng-if="row.entity.count == 0"> <div class="ui-grid-cell" ui-grid-cell ng-repeat="(colRenderIndex, col) in colContainer.renderedColumns "> </div> </div> <div ng-if="row.entity.count > 0"> <a ng-click="grid.appScope.labeled_jobs(row.entity.status)"> <div class="ui-grid-cell" ui-grid-cell ng-repeat="(colRenderIndex, col) in colContainer.renderedColumns "> </div> </a> </div>')}]);